{"cells":[{"cell_type":"code","execution_count":1,"id":"7e97ee7a","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7e97ee7a","executionInfo":{"status":"ok","timestamp":1692104020186,"user_tz":-120,"elapsed":78797,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"9ddefb24-2191-43d0-ba4d-260cf0e3921e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting sentence_transformers\n","  Downloading sentence-transformers-2.2.2.tar.gz (85 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m86.0/86.0 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting neo4j\n","  Downloading neo4j-5.11.0.tar.gz (188 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m188.4/188.4 kB\u001b[0m \u001b[31m9.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Installing backend dependencies ... \u001b[?25l\u001b[?25hdone\n","  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","Collecting transformers<5.0.0,>=4.6.0 (from sentence_transformers)\n","  Downloading transformers-4.31.0-py3-none-any.whl (7.4 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.4/7.4 MB\u001b[0m \u001b[31m17.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (4.66.0)\n","Requirement already satisfied: torch>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (2.0.1+cu118)\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (0.15.2+cu118)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (1.23.5)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (1.2.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (1.10.1)\n","Requirement already satisfied: nltk in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (3.8.1)\n","Collecting sentencepiece (from sentence_transformers)\n","  Downloading sentencepiece-0.1.99-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m41.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting huggingface-hub>=0.4.0 (from sentence_transformers)\n","  Downloading huggingface_hub-0.16.4-py3-none-any.whl (268 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m268.8/268.8 kB\u001b[0m \u001b[31m15.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: pytz in /usr/local/lib/python3.10/dist-packages (from neo4j) (2023.3)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence_transformers) (3.12.2)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence_transformers) (2023.6.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence_transformers) (2.31.0)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence_transformers) (6.0.1)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence_transformers) (4.7.1)\n","Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence_transformers) (23.1)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.6.0->sentence_transformers) (1.12)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.6.0->sentence_transformers) (3.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.6.0->sentence_transformers) (3.1.2)\n","Requirement already satisfied: triton==2.0.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.6.0->sentence_transformers) (2.0.0)\n","Requirement already satisfied: cmake in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch>=1.6.0->sentence_transformers) (3.27.1)\n","Requirement already satisfied: lit in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch>=1.6.0->sentence_transformers) (16.0.6)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.6.0->sentence_transformers) (2023.6.3)\n","Collecting tokenizers!=0.11.3,<0.14,>=0.11.1 (from transformers<5.0.0,>=4.6.0->sentence_transformers)\n","  Downloading tokenizers-0.13.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.8/7.8 MB\u001b[0m \u001b[31m74.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting safetensors>=0.3.1 (from transformers<5.0.0,>=4.6.0->sentence_transformers)\n","  Downloading safetensors-0.3.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m59.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from nltk->sentence_transformers) (8.1.6)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from nltk->sentence_transformers) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->sentence_transformers) (3.2.0)\n","Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.10/dist-packages (from torchvision->sentence_transformers) (9.4.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.6.0->sentence_transformers) (2.1.3)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.4.0->sentence_transformers) (3.2.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.4.0->sentence_transformers) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.4.0->sentence_transformers) (2.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.4.0->sentence_transformers) (2023.7.22)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.6.0->sentence_transformers) (1.3.0)\n","Building wheels for collected packages: sentence_transformers, neo4j\n","  Building wheel for sentence_transformers (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for sentence_transformers: filename=sentence_transformers-2.2.2-py3-none-any.whl size=125924 sha256=90e9e78e72b5998b3e39f6ff6b972e0f2804d15f7e86dfd04f130775141bf371\n","  Stored in directory: /root/.cache/pip/wheels/62/f2/10/1e606fd5f02395388f74e7462910fe851042f97238cbbd902f\n","  Building wheel for neo4j (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for neo4j: filename=neo4j-5.11.0-py3-none-any.whl size=259793 sha256=3cb83a55e17e6c1561b1b7a35580d548f506b014201d7a4fe832731ce50c7e7a\n","  Stored in directory: /root/.cache/pip/wheels/5f/9b/72/d893916a92e5bd362c3c28dc8dacc060419009e5a8cebb9461\n","Successfully built sentence_transformers neo4j\n","Installing collected packages: tokenizers, sentencepiece, safetensors, neo4j, huggingface-hub, transformers, sentence_transformers\n","Successfully installed huggingface-hub-0.16.4 neo4j-5.11.0 safetensors-0.3.2 sentence_transformers-2.2.2 sentencepiece-0.1.99 tokenizers-0.13.3 transformers-4.31.0\n","Looking in links: https://data.pyg.org/whl/torch-2.0.0+cpu.html\n","Collecting torch-scatter\n","  Downloading https://data.pyg.org/whl/torch-2.0.0%2Bcpu/torch_scatter-2.1.1%2Bpt20cpu-cp310-cp310-linux_x86_64.whl (504 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m504.1/504.1 kB\u001b[0m \u001b[31m15.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting torch-sparse\n","  Downloading https://data.pyg.org/whl/torch-2.0.0%2Bcpu/torch_sparse-0.6.17%2Bpt20cpu-cp310-cp310-linux_x86_64.whl (1.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m43.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting torch-cluster\n","  Downloading https://data.pyg.org/whl/torch-2.0.0%2Bcpu/torch_cluster-1.6.1%2Bpt20cpu-cp310-cp310-linux_x86_64.whl (732 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m732.3/732.3 kB\u001b[0m \u001b[31m40.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting torch-geometric\n","  Downloading torch_geometric-2.3.1.tar.gz (661 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m661.6/661.6 kB\u001b[0m \u001b[31m7.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from torch-sparse) (1.10.1)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (4.66.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.23.5)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (3.1.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (2.31.0)\n","Requirement already satisfied: pyparsing in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (3.1.1)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.2.2)\n","Requirement already satisfied: psutil>=5.8.0 in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (5.9.5)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch-geometric) (2.1.3)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (3.2.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (2.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (2023.7.22)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->torch-geometric) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->torch-geometric) (3.2.0)\n","Building wheels for collected packages: torch-geometric\n","  Building wheel for torch-geometric (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for torch-geometric: filename=torch_geometric-2.3.1-py3-none-any.whl size=910454 sha256=490bb619a7e82620b505d9424d6bb0ca04424532bcfe53ac014d20836ff8c077\n","  Stored in directory: /root/.cache/pip/wheels/ac/dc/30/e2874821ff308ee67dcd7a66dbde912411e19e35a1addda028\n","Successfully built torch-geometric\n","Installing collected packages: torch-scatter, torch-sparse, torch-cluster, torch-geometric\n","Successfully installed torch-cluster-1.6.1+pt20cpu torch-geometric-2.3.1 torch-scatter-2.1.1+pt20cpu torch-sparse-0.6.17+pt20cpu\n"]}],"source":["!pip install sentence_transformers neo4j\n","!pip install torch-scatter torch-sparse torch-cluster torch-geometric -f https://data.pyg.org/whl/torch-2.0.0+cpu.html\n","#!pip install tensorflow_ranking"]},{"cell_type":"code","execution_count":2,"id":"1864f3f4","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1864f3f4","executionInfo":{"status":"ok","timestamp":1692105245420,"user_tz":-120,"elapsed":12327,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"f3ea8cfd-863b-4d28-f84e-c03a98bc2dba"},"outputs":[{"output_type":"stream","name":"stdout","text":["0.6.17+pt20cpu\n"]}],"source":["#!pip install torch-geometric -f https://data.pyg.org/whl/torch-2.0.0+cpu.html\n","#!python.exe -m pip install --upgrade pip\n","#!pip install torch-scatter torch-sparse torch-cluster -f https://data.pyg.org/whl/torch-2.0.0+cpu.html --user\n","#!pip uninstall torch-sparse\n","import torch_sparse\n","print(torch_sparse.__version__)"]},{"cell_type":"code","execution_count":3,"id":"7a2ffe68","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7a2ffe68","executionInfo":{"status":"ok","timestamp":1692105361686,"user_tz":-120,"elapsed":6786,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"767e0f5e-53f5-40d9-a710-bce846dd340e"},"outputs":[{"output_type":"stream","name":"stdout","text":["cpu\n"]}],"source":["import torch\n","import pandas as pd\n","import numpy as np\n","from torch.nn import Linear\n","import torch.nn.functional as F\n","from sentence_transformers import SentenceTransformer\n","from typing import Dict, Tuple\n","import torch_geometric.transforms as T\n","from torch_geometric.nn import SAGEConv, to_hetero\n","\n","from torch_geometric.data import HeteroData\n","from torch_geometric.transforms import ToUndirected, RandomLinkSplit, RandomNodeSplit\n","\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print(device)"]},{"cell_type":"markdown","id":"63325937","metadata":{"id":"63325937"},"source":["First, we can create a data object of type torch_geometric.data.HeteroData, for which we define node feature tensors, edge index tensors and edge feature tensors individually for each type:\n","Node or edge tensors will be automatically created upon first access and indexed by string keys. Node types are identified by a single string while edge types are identified by using a triplet (source_node_type, edge_type, destination_node_type) of strings: the edge type identifier and the two node types between which the edge type can exist. As such, the data object allows different feature dimensionalities for each type."]},{"cell_type":"code","execution_count":null,"id":"e064f868","metadata":{"id":"e064f868"},"outputs":[],"source":["from neo4j import GraphDatabase\n","\n","url= 'bolt://localhost:7687'\n","user = 'neo4j'\n","password = 'mektep146'\n","\n","driver = GraphDatabase.driver(url, auth=(user, password))\n","\n","def fetch_data(query, params={}):\n","  with driver.session() as session:\n","    result = session.run(query, params)\n","    return pd.DataFrame([r.values() for r in result], columns=result.keys())"]},{"cell_type":"markdown","id":"1a4bb324","metadata":{"id":"1a4bb324"},"source":["# Export Neo4j Graph and construct a heterogeneous pyG graph"]},{"cell_type":"code","execution_count":null,"id":"409425ba","metadata":{"id":"409425ba"},"outputs":[],"source":["def load_node(cypher, index_col, encoders=None, **kwargs):\n","    # Execute the cypher query and retrieve data from Neo4j\n","    df = fetch_data(cypher)\n","    df.set_index(index_col, inplace=True)\n","    # Define node mapping\n","    mapping = {index: i for i, index in enumerate(df.index.unique())}\n","    # Define node features\n","    x = None\n","    if encoders is not None:\n","        xs = [encoder(df[col]) for col, encoder in encoders.items()]\n","        x = torch.cat(xs, dim=-1)\n","\n","    return x, mapping"]},{"cell_type":"code","execution_count":null,"id":"46767f18","metadata":{"id":"46767f18"},"outputs":[],"source":["def load_edge(cypher, src_index_col, src_mapping, dst_index_col, dst_mapping,\n","                  encoders=None, **kwargs):\n","    # Execute the cypher query and retrieve data from Neo4j\n","    df = fetch_data(cypher)\n","    # Define edge index\n","    src = [src_mapping[index] for index in df[src_index_col]]\n","    dst = [dst_mapping[index] for index in df[dst_index_col]]\n","    edge_index = torch.tensor([src, dst])\n","    # Define edge features\n","    edge_attr = None\n","    if encoders is not None:\n","        edge_attrs = [encoder(df[col]) for col, encoder in encoders.items()]\n","        edge_attr = torch.cat(edge_attrs, dim=-1)\n","\n","    return edge_index, edge_attr"]},{"cell_type":"markdown","id":"aa00eaee","metadata":{"id":"aa00eaee"},"source":["## Defining the feature encoders"]},{"cell_type":"code","execution_count":null,"id":"91d26d14","metadata":{"id":"91d26d14"},"outputs":[],"source":["class SequenceEncoder(object):\n","    # The 'SequenceEncoder' encodes raw column strings into embeddings.\n","    def __init__(self, model_name='all-MiniLM-L6-v2', device=None):\n","        self.device = device\n","        self.model = SentenceTransformer(model_name, device=device)\n","\n","    @torch.no_grad()\n","    def __call__(self, df):\n","        df = df.fillna('')\n","        x = self.model.encode(df.values, show_progress_bar=True,\n","                              convert_to_tensor=True, device=self.device)\n","        return x.cpu()"]},{"cell_type":"code","execution_count":null,"id":"c80fb0ec","metadata":{"id":"c80fb0ec"},"outputs":[],"source":["class IdentityEncoder(object):\n","    # The 'IdentityEncoder' takes the raw column values and converts them to\n","    # PyTorch tensors.\n","    def __init__(self, dtype=None, is_list=False):\n","        self.dtype = dtype\n","        self.is_list = is_list\n","\n","    def __call__(self, df):\n","        if self.is_list:\n","            return torch.stack([torch.tensor(el) for el in df.values])\n","        tensor=torch.from_numpy(df.values).to(self.dtype)\n","        tensor = tensor.unsqueeze(1)  # Add second dimension with size 1\n","        return tensor"]},{"cell_type":"markdown","id":"84a96b9d","metadata":{"id":"84a96b9d"},"source":["## Fetch the data from Neo4j and construct user mappings and features that will be used as input to the pyG heterogeneous graph."]},{"cell_type":"code","execution_count":null,"id":"6dfd814c","metadata":{"id":"6dfd814c"},"outputs":[],"source":["encoder = {\n","    #'CompanyId' : IdentityEncoder(),\n","    'type': SequenceEncoder(model_name='all-MiniLM-L6-v2'),\n","    'company': IdentityEncoder(),\n","   'country': SequenceEncoder(model_name='all-MiniLM-L6-v2'),\n","    'sector': SequenceEncoder(model_name='all-MiniLM-L6-v2'),\n","    'industry': SequenceEncoder(model_name='all-MiniLM-L6-v2'),\n","    'nace': SequenceEncoder(model_name='all-MiniLM-L6-v2')\n","}\n","user_query = \"\"\"\n","MATCH (n:Company)--(t)\n","WHERE t:CompanyType OR t:Country OR t:Sector OR t:Industry OR t:Nace\n","RETURN distinct n.id as CompanyId, id(n) as company,\n","  COLLECT(DISTINCT CASE WHEN t:CompanyType THEN t.name ELSE NULL END)[0] AS type,\n","  COLLECT(DISTINCT CASE WHEN t:Country THEN t.id ELSE NULL END)[0] AS country,\n","  COLLECT(DISTINCT CASE WHEN t:Sector THEN t.name ELSE NULL END)[0] AS sector,\n","  COLLECT(DISTINCT CASE WHEN t:Industry THEN t.name ELSE NULL END)[0] AS industry,\n","  COLLECT(DISTINCT CASE WHEN t:Nace THEN t.name ELSE NULL END)[0] AS nace\n","\"\"\"\n","\n","company_x, company_mapping = load_node(user_query, index_col='CompanyId', encoders=encoder)"]},{"cell_type":"code","execution_count":null,"id":"f0e22b83","metadata":{"colab":{"referenced_widgets":["b0e8bf09c7e04859a6dbc92548e2ef2d","46d96fb2711446adb383d9ebe8a68f6d","5b942091ed0c4ace8c4c6e9d1ff725ba","58e6e1970e6c4cd19ca8c5aca2026204","e620e090aea4458ca6202a9484cd80d9"]},"id":"f0e22b83","outputId":"ed3f63f8-f94b-4cc3-a308-af43fe9bb9d8"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"b0e8bf09c7e04859a6dbc92548e2ef2d","version_major":2,"version_minor":0},"text/plain":["Batches:   0%|          | 0/1082 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"46d96fb2711446adb383d9ebe8a68f6d","version_major":2,"version_minor":0},"text/plain":["Batches:   0%|          | 0/1082 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"5b942091ed0c4ace8c4c6e9d1ff725ba","version_major":2,"version_minor":0},"text/plain":["Batches:   0%|          | 0/1082 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"58e6e1970e6c4cd19ca8c5aca2026204","version_major":2,"version_minor":0},"text/plain":["Batches:   0%|          | 0/1082 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e620e090aea4458ca6202a9484cd80d9","version_major":2,"version_minor":0},"text/plain":["Batches:   0%|          | 0/1082 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"}],"source":["## only 3 SECTOR: or i.name='Producer Manufacturing'\n","encoder = {\n","    #'CompanyId' : IdentityEncoder(),\n","    'type': SequenceEncoder(model_name='all-MiniLM-L6-v2'),\n","    'company': IdentityEncoder(),\n","   'country': SequenceEncoder(model_name='all-MiniLM-L6-v2'),\n","    'sector': SequenceEncoder(model_name='all-MiniLM-L6-v2'),\n","    'industry': SequenceEncoder(model_name='all-MiniLM-L6-v2'),\n","    'nace': SequenceEncoder(model_name='all-MiniLM-L6-v2')\n","}\n","user_query = \"\"\"\n","MATCH (n:Company)--(i:Sector) where i.name='Technology Services' or i.name='Electronic Technology' with n\n","MATCH (n)--(t)\n","WHERE t:CompanyType OR t:Country OR t:Sector OR t:Industry OR t:Nace\n","RETURN distinct n.id as CompanyId, id(n) as company,\n","  COLLECT(DISTINCT CASE WHEN t:CompanyType THEN t.name ELSE NULL END)[0] AS type,\n","  COLLECT(DISTINCT CASE WHEN t:Country THEN t.id ELSE NULL END)[0] AS country,\n","  COLLECT(DISTINCT CASE WHEN t:Sector THEN t.name ELSE NULL END)[0] AS sector,\n","  COLLECT(DISTINCT CASE WHEN t:Industry THEN t.name ELSE NULL END)[0] AS industry,\n","  COLLECT(DISTINCT CASE WHEN t:Nace THEN t.name ELSE NULL END)[0] AS nace\n","\"\"\"\n","\n","company_x, company_mapping = load_node(user_query, index_col='CompanyId', encoders=encoder)"]},{"cell_type":"code","execution_count":null,"id":"2a16d9fc","metadata":{"id":"2a16d9fc"},"outputs":[],"source":["# #encoder = {\n","#     'CompanyId' : IdentityEncoder,\n","#     'type': SequenceEncoder(model_name='all-MiniLM-L6-v2')\n","# }\n","\n","# user_query = \"\"\"\n","# MATCH (u:CompanyType) RETURN u.name AS CompanyTypeName\n","# \"\"\"\n","\n","# CompanyType_x, CompanyType_mapping = load_node(user_query, index_col='CompanyTypeName')"]},{"cell_type":"code","execution_count":null,"id":"9308552e","metadata":{"id":"9308552e"},"outputs":[],"source":["# encoder = {\n","#     'CountryName': SequenceEncoder(model_name='all-MiniLM-L6-v2')\n","# }\n","\n","# user_query = \"\"\"\n","# MATCH (u:Country) RETURN u.name AS CountryName, u.id as id\n","# \"\"\"\n","\n","# Country_x, Country_mapping = load_node(user_query, index_col='id', encoders=encoder)"]},{"cell_type":"code","execution_count":null,"id":"45d7055e","metadata":{"id":"45d7055e"},"outputs":[],"source":["# encoder = {\n","#     'SectorName': SequenceEncoder(model_name='all-MiniLM-L6-v2')\n","# }\n","\n","# user_query = \"\"\"\n","# MATCH (u:Sector) RETURN u.name AS SectorName, id(u) as id\n","# \"\"\"\n","\n","# Sector_x, Sector_mapping = load_node(user_query, index_col='id', encoders=encoder)"]},{"cell_type":"code","execution_count":null,"id":"011056ab","metadata":{"id":"011056ab"},"outputs":[],"source":["# encoder = {\n","#     'IndustryName': SequenceEncoder(model_name='all-MiniLM-L6-v2')\n","# }\n","\n","# user_query = \"\"\"\n","# MATCH (u:Industry) RETURN u.name AS IndustryName,id(u) as id\n","# \"\"\"\n","\n","# Industry_x, Industry_mapping = load_node(user_query, index_col='id', encoders=encoder)"]},{"cell_type":"code","execution_count":null,"id":"1415db3c","metadata":{"id":"1415db3c"},"outputs":[],"source":["# encoder = {\n","#     'NaceName': SequenceEncoder(model_name='all-MiniLM-L6-v2'),\n","#     'id' :  IdentityEncoder()\n","# }\n","\n","# user_query = \"\"\"\n","# MATCH (u:Nace) RETURN u.name AS NaceName, id(u) as index, u.id as id\n","# \"\"\"\n","\n","# Nace_x, Nace_mapping = load_node(user_query, index_col='index', encoders=encoder)"]},{"cell_type":"code","execution_count":null,"id":"52c49e31","metadata":{"id":"52c49e31"},"outputs":[],"source":["#ONLY 3 INDUSTRY\n","edge_query = \"\"\"\n","MATCH (u:Company)--(i:Sector) where i.name='Technology Services' or i.name='Electronic Technology'   with u\n","MATCH (m:Company)--(j:Sector) where j.name='Technology Services' or j.name='Electronic Technology'  with u,m\n","MATCH (u)-[r:SUPPLIES]->(m)\n","RETURN u.id AS Company1Id, m.id AS Company2Id, r.weight AS weight\n","\"\"\"\n","# didn't include revenue, and start date\n","supplies_index, supplies_label = load_edge(\n","    edge_query,\n","    src_index_col='Company1Id',\n","    src_mapping=company_mapping,\n","    dst_index_col='Company2Id',\n","    dst_mapping=company_mapping,\n","    encoders={'weight': IdentityEncoder(dtype=torch.long,is_list=True)},\n",")"]},{"cell_type":"code","execution_count":null,"id":"06482e67","metadata":{"id":"06482e67"},"outputs":[],"source":["edge_query = \"\"\"\n","MATCH (u:Company)--(i:Sector) where i.name='Technology Services' or i.name='Electronic Technology'   with u\n","MATCH (m:Company)--(j:Sector) where j.name='Technology Services' or j.name='Electronic Technology'  with u,m\n","MATCH (u)-[r:PARTNERS]->(m)\n","RETURN u.id AS Company1Id, m.id AS Company2Id, r.start_date AS start_date\n","\"\"\"\n","# didn't include start date\n","partners_index, partners_label = load_edge(\n","    edge_query,\n","    src_index_col='Company1Id',\n","    src_mapping=company_mapping,\n","    dst_index_col='Company2Id',\n","    dst_mapping=company_mapping\n","    #encoders={'start_date': IdentityEncoder(dtype=torch.long)},\n",")"]},{"cell_type":"code","execution_count":null,"id":"40f87d1a","metadata":{"id":"40f87d1a"},"outputs":[],"source":["edge_query = \"\"\"\n","MATCH (u:Company)--(i:Sector) where i.name='Technology Services' or i.name='Electronic Technology'   with u\n","MATCH (m:Company)--(j:Sector) where j.name='Technology Services' or j.name='Electronic Technology'  with u,m\n","MATCH (u)-[r:COMPETES]->(m)\n","RETURN u.id AS Company1Id, m.id AS Company2Id, r.start_date AS start_date\n","\"\"\"\n","# didn't include start date\n","competes_index, competes_label = load_edge(\n","    edge_query,\n","    src_index_col='Company1Id',\n","    src_mapping=company_mapping,\n","    dst_index_col='Company2Id',\n","    dst_mapping=company_mapping\n","    #encoders={'start_date': IdentityEncoder(dtype=torch.long)},\n",")"]},{"cell_type":"code","execution_count":null,"id":"a10824b3","metadata":{"id":"a10824b3"},"outputs":[],"source":["edge_query = \"\"\"\n","MATCH (u:Company)--(i:Sector) where i.name='Technology Services' or i.name='Electronic Technology'   with u\n","MATCH (m:Company)--(j:Sector) where j.name='Technology Services' or j.name='Electronic Technology' with u,m\n","MATCH (u)-[r:ULTIMATE_PARENT_OF]->(m)\n","RETURN u.id AS Company1Id, m.id AS Company2Id, r.start_date AS start_date\n","\"\"\"\n","parent_index, parent_label = load_edge(\n","    edge_query,\n","    src_index_col='Company1Id',\n","    src_mapping=company_mapping,\n","    dst_index_col='Company2Id',\n","    dst_mapping=company_mapping\n","    #encoders={'start_date': IdentityEncoder(dtype=torch.long)},\n",")"]},{"cell_type":"code","execution_count":null,"id":"3034330f","metadata":{"id":"3034330f"},"outputs":[],"source":["edge_query = \"\"\"\n","MATCH (u:Company)-[r:SUPPLIES]->(m:Company)\n","RETURN u.id AS Company1Id, m.id AS Company2Id, r.weight AS weight\n","\"\"\"\n","# didn't include revenue, and start date\n","supplies_index, supplies_label = load_edge(\n","    edge_query,\n","    src_index_col='Company1Id',\n","    src_mapping=company_mapping,\n","    dst_index_col='Company2Id',\n","    dst_mapping=company_mapping,\n","    encoders={'weight': IdentityEncoder(dtype=torch.long,is_list=True)},\n",")"]},{"cell_type":"code","execution_count":null,"id":"bd8bb2a3","metadata":{"id":"bd8bb2a3"},"outputs":[],"source":["edge_query = \"\"\"\n","MATCH (u:Company)-[r:PARTNERS]->(m:Company)\n","RETURN u.id AS Company1Id, m.id AS Company2Id, r.start_date AS start_date\n","\"\"\"\n","# didn't include start date\n","partners_index, partners_label = load_edge(\n","    edge_query,\n","    src_index_col='Company1Id',\n","    src_mapping=company_mapping,\n","    dst_index_col='Company2Id',\n","    dst_mapping=company_mapping\n","    #encoders={'start_date': IdentityEncoder(dtype=torch.long)},\n",")"]},{"cell_type":"code","execution_count":null,"id":"39b28105","metadata":{"id":"39b28105"},"outputs":[],"source":["edge_query = \"\"\"\n","MATCH (u:Company)-[r:COMPETES]->(m:Company)\n","RETURN u.id AS Company1Id, m.id AS Company2Id, r.start_date AS start_date\n","\"\"\"\n","# didn't include start date\n","competes_index, competes_label = load_edge(\n","    edge_query,\n","    src_index_col='Company1Id',\n","    src_mapping=company_mapping,\n","    dst_index_col='Company2Id',\n","    dst_mapping=company_mapping\n","    #encoders={'start_date': IdentityEncoder(dtype=torch.long)},\n",")"]},{"cell_type":"code","execution_count":null,"id":"13df4f67","metadata":{"id":"13df4f67"},"outputs":[],"source":["edge_query = \"\"\"\n","MATCH (u:Company)-[r:ULTIMATE_PARENT_OF]->(m:Company)\n","RETURN u.id AS Company1Id, m.id AS Company2Id, r.start_date AS start_date\n","\"\"\"\n","parent_index, parent_label = load_edge(\n","    edge_query,\n","    src_index_col='Company1Id',\n","    src_mapping=company_mapping,\n","    dst_index_col='Company2Id',\n","    dst_mapping=company_mapping\n","    #encoders={'start_date': IdentityEncoder(dtype=torch.long)},\n",")"]},{"cell_type":"code","execution_count":null,"id":"1334d5ab","metadata":{"id":"1334d5ab"},"outputs":[],"source":["# edge_query = \"\"\"\n","# MATCH (u:Company)-[r:BELONGS_TO]->(m:Sector)\n","# RETURN u.id AS Company1Id, id(m) AS SectorId\n","# \"\"\"\n","# belongs_index, belongs_label = load_edge(\n","#     edge_query,\n","#     src_index_col='Company1Id',\n","#     src_mapping=company_mapping,\n","#     dst_index_col='SectorId',\n","#     dst_mapping=Sector_mapping\n","#     #encoders={'start_date': IdentityEncoder(dtype=torch.long)},\n","# )"]},{"cell_type":"code","execution_count":null,"id":"4c96bdce","metadata":{"id":"4c96bdce"},"outputs":[],"source":["# edge_query = \"\"\"\n","# MATCH (u:Company)-[r:BELONGS_TO]->(m:Industry)\n","# RETURN u.id AS Company1Id, id(m) AS IndustryId\n","# \"\"\"\n","# belongs2_index, belongs2_label = load_edge(\n","#     edge_query,\n","#     src_index_col='Company1Id',\n","#     src_mapping=company_mapping,\n","#     dst_index_col='IndustryId',\n","#     dst_mapping=Industry_mapping\n","#     #encoders={'start_date': IdentityEncoder(dtype=torch.long)},\n","# )"]},{"cell_type":"code","execution_count":null,"id":"850757c7","metadata":{"id":"850757c7"},"outputs":[],"source":["# #DO NOT RUN\n","# edge_query = \"\"\"\n","# MATCH (u:Company)-[r:IS_A]->(m:CompanyType)\n","# RETURN u.id AS Company1Id, m.name AS CompanyTypeName\n","# \"\"\"\n","# is_index, is_label = load_edge(\n","#     edge_query,\n","#     src_index_col='Company1Id',\n","#     src_mapping=company_mapping,\n","#     dst_index_col='CompanyTypeName',\n","#     dst_mapping=CompanyType_mapping\n","#     #encoders={'start_date': IdentityEncoder(dtype=torch.long)},\n","# )"]},{"cell_type":"code","execution_count":null,"id":"fbd33c53","metadata":{"id":"fbd33c53"},"outputs":[],"source":["# edge_query = \"\"\"\n","# MATCH (u:Company)-[r:LOCATED_IN]->(m:Country)\n","# RETURN u.id AS Company1Id, m.id AS CountryId\n","# \"\"\"\n","# located_index, located_label = load_edge(\n","#     edge_query,\n","#     src_index_col='Company1Id',\n","#     src_mapping=company_mapping,\n","#     dst_index_col='CountryId',\n","#     dst_mapping=Country_mapping\n","#     #encoders={'start_date': IdentityEncoder(dtype=torch.long)},\n","# )"]},{"cell_type":"code","execution_count":null,"id":"a13b81c7","metadata":{"id":"a13b81c7"},"outputs":[],"source":["# edge_query = \"\"\"\n","# MATCH (u:Company)-[r:SHIP_TO]->(m:Country)\n","# RETURN u.id AS Company1Id, m.id AS CountryId\n","# \"\"\"\n","# ships_index, ships_label = load_edge(\n","#     edge_query,\n","#     src_index_col='Company1Id',\n","#     src_mapping=company_mapping,\n","#     dst_index_col='CountryId',\n","#     dst_mapping=Country_mapping\n","#     #encoders={'start_date': IdentityEncoder(dtype=torch.long)},\n","# )"]},{"cell_type":"code","execution_count":null,"id":"bc14fb2e","metadata":{"id":"bc14fb2e"},"outputs":[],"source":["# edge_query = \"\"\"\n","# MATCH (u:Company)-[r:PERFORMS]->(m:Nace)\n","# RETURN u.id AS Company1Id, id(m) AS NaceId\n","# \"\"\"\n","# nace_index, nace_label = load_edge(\n","#     edge_query,\n","#     src_index_col='Company1Id',\n","#     src_mapping=company_mapping,\n","#     dst_index_col='NaceId',\n","#     dst_mapping=Nace_mapping\n","#     #encoders={'start_date': IdentityEncoder(dtype=torch.long)},\n","# )"]},{"cell_type":"markdown","id":"389ac5ab","metadata":{"id":"389ac5ab"},"source":["## Build a heterogeneous pyG graph"]},{"cell_type":"code","execution_count":null,"id":"88debb71","metadata":{"id":"88debb71","outputId":"8eeca38d-b342-4e24-ca4d-c75711d2f9d1"},"outputs":[{"data":{"text/plain":["HeteroData(\n","  \u001b[1mCompany\u001b[0m={\n","    num_nodes=34615,\n","    x=[34615, 1921]\n","  },\n","  \u001b[1m(Company, SUPPLIES, Company)\u001b[0m={ edge_index=[2, 22986] },\n","  \u001b[1m(Company, PARTNERS, Company)\u001b[0m={ edge_index=[2, 11053] },\n","  \u001b[1m(Company, COMPETES, Company)\u001b[0m={ edge_index=[2, 10954] },\n","  \u001b[1m(Company, ULTIMATE_PARENT_OF, Company)\u001b[0m={ edge_index=[2, 5622] }\n",")"]},"execution_count":33,"metadata":{},"output_type":"execute_result"}],"source":["data = HeteroData()\n","# Add nodes for message passing:  # They do not have any features.\n","data['Company'].num_nodes = len(company_mapping)\n","#data['Company'].x = torch.eye(data['Company'].num_nodes, device=device)\n","data['Company'].x = company_x #--> Add user node features\n","#data['Country'].num_nodes = len(Country_mapping)\n","#data['Country'].x = Country_x\n","#data['CompanyType'].num_nodes = len(CompanyType_mapping)\n","#data['Sector'].num_nodes = len(Sector_mapping)\n","#data['Sector'].x = Sector_x\n","#data['Industry'].num_nodes = len(Industry_mapping)\n","#data['Industry'].x = Industry_x\n","#data['Nace'].num_nodes = len(Nace_mapping)\n","#data['Nace'].x = Nace_x\n","# Add relations between nodes\n","data['Company', 'SUPPLIES', 'Company'].edge_index = supplies_index\n","#data['Company', 'SUPPLIES', 'Company'].edge_label = supplies_label\n","\n","data['Company', 'PARTNERS', 'Company'].edge_index = partners_index\n","#data['Company', 'PARTNERS', 'Company'].edge_label = partners_label\n","\n","data['Company', 'COMPETES', 'Company'].edge_index = competes_index\n","#data['Company', 'COMPETES', 'Company'].edge_label = competes_label\n","\n","data['Company', 'ULTIMATE_PARENT_OF', 'Company'].edge_index = parent_index\n","#data['Company', 'ULTIMATE_PARENT_OF', 'Company'].edge_label = parent_label\n","\n","#data['Company', 'BELONGS_TO', 'Sector'].edge_index = belongs_index\n","#data['Company', 'BELONGS_TO', 'Sector'].edge_label = belongs_label\n","\n","#data['Company', 'BELONGS_TO', 'Industry'].edge_index = belongs2_index\n","#data['Company', 'BELONGS_TO', 'Industry'].edge_label = belongs2_label\n","\n","#data['Company', 'IS_A', 'CompanyType'].edge_index = is_index\n","#data['Company', 'IS_A', 'CompanyType'].edge_label = is_label\n","\n","#data['Company', 'LOCATED_IN', 'Country'].edge_index = located_index\n","#data['Company', 'LOCATED_IN', 'Country'].edge_label = located_label\n","\n","#data['Company', 'SHIPS_TO', 'Country'].edge_index = ships_index\n","#data['Company', 'SHIPS_TO', 'Country'].edge_label = ships_label\n","\n","#data['Company', 'PERFORMS', 'Nace'].edge_index = nace_index\n","#data['Company', 'SHIPS_TO', 'Country'].edge_label = ships_label\n","\n","data.to(device, non_blocking=True)"]},{"cell_type":"code","execution_count":null,"id":"9ac5afdf","metadata":{"id":"9ac5afdf"},"outputs":[],"source":["##data.edge_index_dict # [SRC],[DST]\n","from torch_geometric.data import Data\n","companies=data['Company']\n","supply=data['SUPPLIES']\n","#data_hom= data.to_homogeneous()\n","supplies=Data(x=tf.convert_to_tensor(pd.DataFrame(company_mapping.values())),edge_index=supply)\n","supplies\n","#supplies"]},{"cell_type":"markdown","id":"55e43979","metadata":{"id":"55e43979"},"source":["# Train/test data split"]},{"cell_type":"code","execution_count":4,"id":"f094e562","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f094e562","executionInfo":{"status":"ok","timestamp":1692105389723,"user_tz":-120,"elapsed":2189,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"ed99b992-23a4-49f2-f4fd-a399866eb801"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["data=torch.load('/content/drive/MyDrive/graph_1').to(device)  #graph_ElectronicTechnology"],"metadata":{"id":"dgOrBbydQfHo","executionInfo":{"status":"ok","timestamp":1692105420656,"user_tz":-120,"elapsed":2641,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"id":"dgOrBbydQfHo","execution_count":5,"outputs":[]},{"cell_type":"code","execution_count":6,"id":"3fb07988","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3fb07988","executionInfo":{"status":"ok","timestamp":1692105486574,"user_tz":-120,"elapsed":337,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"ef2f3cec-f0c5-4cbd-f6a5-537fbf19c5f1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["HeteroData(\n","  \u001b[1mCompany\u001b[0m={\n","    num_nodes=22946,\n","    x=[22946, 1921]\n","  },\n","  \u001b[1m(Company, SUPPLIES, Company)\u001b[0m={ edge_index=[2, 9432] },\n","  \u001b[1m(Company, PARTNERS, Company)\u001b[0m={ edge_index=[2, 5605] },\n","  \u001b[1m(Company, COMPETES, Company)\u001b[0m={ edge_index=[2, 4733] },\n","  \u001b[1m(Company, ULTIMATE_PARENT_OF, Company)\u001b[0m={ edge_index=[2, 3363] }\n",")"]},"metadata":{},"execution_count":6}],"source":["data"]},{"cell_type":"code","execution_count":7,"id":"02c3ecdb","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"02c3ecdb","executionInfo":{"status":"ok","timestamp":1692105487788,"user_tz":-120,"elapsed":2,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"194f2fa1-c2af-4225-d87a-e8dd473005fd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('Company', 'SUPPLIES', 'Company'),\n"," ('Company', 'PARTNERS', 'Company'),\n"," ('Company', 'COMPETES', 'Company'),\n"," ('Company', 'ULTIMATE_PARENT_OF', 'Company')]"]},"metadata":{},"execution_count":7}],"source":["edge_types=data.edge_types[0:4]\n","edge_types"]},{"cell_type":"code","execution_count":8,"id":"650c6f15","metadata":{"id":"650c6f15","outputId":"ccdcf197-5885-4c4e-defc-8427aeee7c88","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1692105488919,"user_tz":-120,"elapsed":3,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["HeteroData(\n","  \u001b[1mCompany\u001b[0m={\n","    num_nodes=22946,\n","    x=[22946, 1921]\n","  },\n","  \u001b[1m(Company, SUPPLIES, Company)\u001b[0m={ edge_index=[2, 9432] },\n","  \u001b[1m(Company, PARTNERS, Company)\u001b[0m={ edge_index=[2, 5605] },\n","  \u001b[1m(Company, COMPETES, Company)\u001b[0m={ edge_index=[2, 4733] },\n","  \u001b[1m(Company, ULTIMATE_PARENT_OF, Company)\u001b[0m={ edge_index=[2, 3363] },\n","  \u001b[1m(Company, rev_SUPPLIES, Company)\u001b[0m={ edge_index=[2, 9432] },\n","  \u001b[1m(Company, rev_PARTNERS, Company)\u001b[0m={ edge_index=[2, 5605] },\n","  \u001b[1m(Company, rev_COMPETES, Company)\u001b[0m={ edge_index=[2, 4733] },\n","  \u001b[1m(Company, rev_ULTIMATE_PARENT_OF, Company)\u001b[0m={ edge_index=[2, 3363] }\n",")"]},"metadata":{},"execution_count":8}],"source":["# 1. Add a reverse ('movie', 'rev_rates', 'user') relation for message passing.\n","data_und = ToUndirected(merge=False)(data)\n","data_und"]},{"cell_type":"code","execution_count":9,"id":"43580c70","metadata":{"id":"43580c70","outputId":"dc55b8a7-eef1-4ee7-efb1-5961d551a405","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1692105490154,"user_tz":-120,"elapsed":6,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('Company', 'rev_SUPPLIES', 'Company'),\n"," ('Company', 'rev_PARTNERS', 'Company'),\n"," ('Company', 'rev_COMPETES', 'Company'),\n"," ('Company', 'rev_ULTIMATE_PARENT_OF', 'Company')]"]},"metadata":{},"execution_count":9}],"source":["reverse_edge_types = [(x[2], \"{}_{}\".format('rev', x[1]), x[0]) for x in edge_types]\n","reverse_edge_types"]},{"cell_type":"code","execution_count":null,"id":"f805ae93","metadata":{"id":"f805ae93"},"outputs":[],"source":["# del data_und['Company', 'rev_SUPPLIES', 'Company'].edge_label  # Remove \"reverse\" label.\n","# del data_und['Company', 'rev_PARTNERS', 'Company'].edge_label\n","# del data_und['Company', 'rev_COMPETES', 'Company'].edge_label\n","# del data_und['Company', 'rev_ULTIMATE_PARENT_OF', 'Company'].edge_label\n","# del data_und['Company', 'rev_BELONGS_TO', 'Sector'].edge_label\n","# del data_und['Company', 'rev_BELONGS_TO', 'Industry'].edge_label\n","# del data_und['Company', 'rev_IS_A', 'CompanyType'].edge_label\n","# del data_und['Company', 'rev_LOCATED_IN', 'Country'].edge_label\n","# del data_und['Company', 'rev_SHIPS_TO', 'Country'].edge_label\n","# del data_und['Company', 'rev_PERFORMS', 'Nace'].edge_label"]},{"cell_type":"code","execution_count":null,"id":"4c9bfef4","metadata":{"id":"4c9bfef4"},"outputs":[],"source":["#torch.save(data,'graph_2')"]},{"cell_type":"code","execution_count":10,"id":"f6225469","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f6225469","executionInfo":{"status":"ok","timestamp":1692105494229,"user_tz":-120,"elapsed":300,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"5bda0c31-b7e1-45b3-bad7-bb62da5ea1d3"},"outputs":[{"output_type":"stream","name":"stdout","text":["HeteroData(\n","  \u001b[1mCompany\u001b[0m={\n","    num_nodes=22946,\n","    x=[22946, 1921]\n","  },\n","  \u001b[1m(Company, SUPPLIES, Company)\u001b[0m={\n","    edge_index=[2, 6603],\n","    edge_label=[13206],\n","    edge_label_index=[2, 13206]\n","  },\n","  \u001b[1m(Company, PARTNERS, Company)\u001b[0m={\n","    edge_index=[2, 3924],\n","    edge_label=[7848],\n","    edge_label_index=[2, 7848]\n","  },\n","  \u001b[1m(Company, COMPETES, Company)\u001b[0m={\n","    edge_index=[2, 3314],\n","    edge_label=[6628],\n","    edge_label_index=[2, 6628]\n","  },\n","  \u001b[1m(Company, ULTIMATE_PARENT_OF, Company)\u001b[0m={\n","    edge_index=[2, 2355],\n","    edge_label=[4710],\n","    edge_label_index=[2, 4710]\n","  },\n","  \u001b[1m(Company, rev_SUPPLIES, Company)\u001b[0m={ edge_index=[2, 6603] },\n","  \u001b[1m(Company, rev_PARTNERS, Company)\u001b[0m={ edge_index=[2, 3924] },\n","  \u001b[1m(Company, rev_COMPETES, Company)\u001b[0m={ edge_index=[2, 3314] },\n","  \u001b[1m(Company, rev_ULTIMATE_PARENT_OF, Company)\u001b[0m={ edge_index=[2, 2355] }\n",")\n","HeteroData(\n","  \u001b[1mCompany\u001b[0m={\n","    num_nodes=22946,\n","    x=[22946, 1921]\n","  },\n","  \u001b[1m(Company, SUPPLIES, Company)\u001b[0m={\n","    edge_index=[2, 6603],\n","    edge_label=[1886],\n","    edge_label_index=[2, 1886]\n","  },\n","  \u001b[1m(Company, PARTNERS, Company)\u001b[0m={\n","    edge_index=[2, 3924],\n","    edge_label=[1120],\n","    edge_label_index=[2, 1120]\n","  },\n","  \u001b[1m(Company, COMPETES, Company)\u001b[0m={\n","    edge_index=[2, 3314],\n","    edge_label=[946],\n","    edge_label_index=[2, 946]\n","  },\n","  \u001b[1m(Company, ULTIMATE_PARENT_OF, Company)\u001b[0m={\n","    edge_index=[2, 2355],\n","    edge_label=[672],\n","    edge_label_index=[2, 672]\n","  },\n","  \u001b[1m(Company, rev_SUPPLIES, Company)\u001b[0m={ edge_index=[2, 6603] },\n","  \u001b[1m(Company, rev_PARTNERS, Company)\u001b[0m={ edge_index=[2, 3924] },\n","  \u001b[1m(Company, rev_COMPETES, Company)\u001b[0m={ edge_index=[2, 3314] },\n","  \u001b[1m(Company, rev_ULTIMATE_PARENT_OF, Company)\u001b[0m={ edge_index=[2, 2355] }\n",")\n","HeteroData(\n","  \u001b[1mCompany\u001b[0m={\n","    num_nodes=22946,\n","    x=[22946, 1921]\n","  },\n","  \u001b[1m(Company, SUPPLIES, Company)\u001b[0m={\n","    edge_index=[2, 7546],\n","    edge_label=[3772],\n","    edge_label_index=[2, 3772]\n","  },\n","  \u001b[1m(Company, PARTNERS, Company)\u001b[0m={\n","    edge_index=[2, 4484],\n","    edge_label=[2242],\n","    edge_label_index=[2, 2242]\n","  },\n","  \u001b[1m(Company, COMPETES, Company)\u001b[0m={\n","    edge_index=[2, 3787],\n","    edge_label=[1892],\n","    edge_label_index=[2, 1892]\n","  },\n","  \u001b[1m(Company, ULTIMATE_PARENT_OF, Company)\u001b[0m={\n","    edge_index=[2, 2691],\n","    edge_label=[1344],\n","    edge_label_index=[2, 1344]\n","  },\n","  \u001b[1m(Company, rev_SUPPLIES, Company)\u001b[0m={ edge_index=[2, 7546] },\n","  \u001b[1m(Company, rev_PARTNERS, Company)\u001b[0m={ edge_index=[2, 4484] },\n","  \u001b[1m(Company, rev_COMPETES, Company)\u001b[0m={ edge_index=[2, 3787] },\n","  \u001b[1m(Company, rev_ULTIMATE_PARENT_OF, Company)\u001b[0m={ edge_index=[2, 2691] }\n",")\n"]}],"source":["from torch_geometric.transforms import RandomLinkSplit, RandomNodeSplit\n","\n","## designed for transductive learning https://zqfang.github.io/2021-08-12-graph-linkpredict/#inductive-link-prediction-split\n","tfs = RandomLinkSplit(is_undirected=True,\n","                      num_val=0.1,\n","                      num_test=0.2,\n","                      add_negative_train_samples=True,\n","                      neg_sampling_ratio=1.0,\n","                      #key = \"edge_label\", # supervision label\n","                      disjoint_train_ratio=0,# disjoint mode if > 0\n","                      edge_types=edge_types, # for heteroData\n","                      rev_edge_types=reverse_edge_types, # for heteroData\n","                      )\n","train_data, val_data, test_data = tfs(data_und)\n","# For this, we first split the set of edges into\n","# training (80%), validation (10%), and testing edges (10%).\n","# Across the training edges, we use 70% of edges for message passing,\n","# and 30% of edges for supervision.\n","# We further want to generate fixed negative edges for evaluation with a ratio of 2:1.\n","# Negative edges during training will be generated on-the-fly.\n","# We can leverage the `RandomLinkSplit()` transform for this from PyG:\n","\n","\n","#After applying the `RandomLinkSplit` transform, the data is transformed from\n","# a data object to a list of tuples (train_data, val_data, test_data), with\n","# each element representing the corresponding split.\n","print(train_data)\n","print(val_data)\n","print(test_data)\n"]},{"cell_type":"code","source":["n=train_data['SUPPLIES'].edge_label_index[:,train_data['SUPPLIES'].edge_label==0]\n","#train_data['SUPPLIES'].edge_index[1,train_data['SUPPLIES'].edge_index[0]==n[0][]]\n","#torch.where(train_data['SUPPLIES'].edge_index[0]==1662,train_data['SUPPLIES'].edge_index[1])\n","n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gW1UT8a03lvd","executionInfo":{"status":"ok","timestamp":1691161756054,"user_tz":-120,"elapsed":235,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"f35b2708-af77-43bc-bdb2-ab5c091105ed"},"id":"gW1UT8a03lvd","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[21038, 18365, 18785,  ..., 14715, 14835,  9152],\n","        [21947, 13654,  8565,  ...,  6067,  7029, 10314]])"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","execution_count":null,"id":"58c06fbd","metadata":{"id":"58c06fbd"},"outputs":[],"source":["#transform to triplets for GraIL\n","import pandas as  pd\n","import torch\n","pd.DataFrame(train_data['Company', 'SUPPLIES', 'Company'].edge_index.numpy()).transpose()"]},{"cell_type":"code","execution_count":null,"id":"19e6a07a","metadata":{"id":"19e6a07a"},"outputs":[],"source":["## if inductive learning, need subgraph. e.g\n","from torch_geometric.utils import subgraph\n","import copy\n","train_mask = torch.rand(data['Company'].num_nodes) < 0.7\n","test_mask = ~train_mask\n","\n","company_data = copy.copy(data)\n","company_data.edge_index=torch.cat((supplies_index,competes_index,partners_index,parent_index), -1)\n","\n","train_data_ind = copy.copy(company_data)\n","train_data_ind.edge_index, _ = subgraph(train_mask, company_data.edge_index, relabel_nodes=True)\n","#train_data.x = data.x[train_mask]\n","\n","test_data_ind = copy.copy(data)\n","test_data_ind.edge_index, _ = subgraph(test_mask, company_data.edge_index, relabel_nodes=True)\n","#test_data.x = data.x[test_mask]"]},{"cell_type":"markdown","id":"eea50b4f","metadata":{"id":"eea50b4f"},"source":["# Defining Mini-batch Loaders"]},{"cell_type":"markdown","id":"0a5e3958","metadata":{"id":"0a5e3958"},"source":["It will generate subgraphs that can be used as input into our GNN.we make use of the loader.LinkNeighborLoader which samples multiple hops from both ends of a link and creates a subgraph from it. Here, edge_label_index serves as the \"seed links\" to start sampling from."]},{"cell_type":"code","execution_count":22,"id":"e3dacc8a","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e3dacc8a","executionInfo":{"status":"ok","timestamp":1692106244302,"user_tz":-120,"elapsed":339,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"6276ded3-e5b2-4ca2-e510-6b82edbc445f"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torch_geometric/sampler/neighbor_sampler.py:50: UserWarning: Using '{self.__class__.__name__}' without a 'pyg-lib' installation is deprecated and will be removed soon. Please install 'pyg-lib' for accelerated neighborhood sampling\n","  warnings.warn(\"Using '{self.__class__.__name__}' without a \"\n"]}],"source":["# In the first hop, we sample at most 20 neighbors.\n","# In the second hop, we sample at most 10 neighbors.\n","# In addition, during training, we want to sample negative edges on-the-fly with\n","# a ratio of 2:1.\n","# We can make use of the `loader.LinkNeighborLoader` from PyG:\n","from torch_geometric.loader import LinkNeighborLoader\n","import torch_sparse\n","# Define seed edges:\n","edge_label_index = train_data['Company', 'SUPPLIES', 'Company'].edge_label_index\n","edge_label = train_data['Company', 'SUPPLIES', 'Company'].edge_label\n","\n","batch_size=500\n","train_loader = LinkNeighborLoader(\n","    data=train_data,\n","    num_neighbors=[20, 10],\n","    #neg_sampling='binary',\n","    edge_label_index=(('Company', 'SUPPLIES', 'Company'), edge_label_index),\n","    edge_label=edge_label,\n","    batch_size=batch_size,\n","    shuffle=True\n",")\n"]},{"cell_type":"code","execution_count":null,"id":"1b38bd76","metadata":{"id":"1b38bd76"},"outputs":[],"source":["##Validation batching\n","val_loader = LinkNeighborLoader(\n","    data=val_data,\n","    num_neighbors=[20, 10],\n","   # neg_sampling='binary',\n","    edge_label_index=(('Company', 'SUPPLIES', 'Company'), val_data['Company', 'SUPPLIES', 'Company'].edge_label_index),\n","    edge_label=val_data['Company', 'SUPPLIES', 'Company'].edge_label,\n","    batch_size=batch_size,\n","    shuffle=True,\n",")"]},{"cell_type":"code","execution_count":null,"id":"334680a3","metadata":{"id":"334680a3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690832681652,"user_tz":240,"elapsed":405,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"aff492cf-8661-4724-b643-d02d11712320"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torch_geometric/sampler/neighbor_sampler.py:50: UserWarning: Using '{self.__class__.__name__}' without a 'pyg-lib' installation is deprecated and will be removed soon. Please install 'pyg-lib' for accelerated neighborhood sampling\n","  warnings.warn(\"Using '{self.__class__.__name__}' without a \"\n"]}],"source":["##Test batching\n","test_loader = LinkNeighborLoader(\n","    data=test_data,\n","    num_neighbors=[20, 10],\n","    neg_sampling='binary',\n","    edge_label_index=(('Company', 'SUPPLIES', 'Company'), test_data['Company', 'SUPPLIES', 'Company'].edge_label_index),\n","    edge_label=test_data['Company', 'SUPPLIES', 'Company'].edge_label,\n","    batch_size=batch_size,\n","    shuffle=True,\n",")"]},{"cell_type":"code","execution_count":null,"id":"4f3ff80c","metadata":{"id":"4f3ff80c"},"outputs":[],"source":["# from torch_geometric.loader import HGTLoader\n","# import torch_sparse\n","# train_loader = HGTLoader(\n","#     train_data,\n","#     # Sample 512 nodes per type and per iteration for 4 iterations\n","#     num_samples={key: [512] * 2 for key in train_data.node_types},\n","#     # Use a batch size of 16 for sampling training nodes of type paper\n","#     batch_size=300,\n","#     input_nodes=('Company', None)\n","# )"]},{"cell_type":"markdown","source":["# Models"],"metadata":{"id":"ev0LUqsqWTqA"},"id":"ev0LUqsqWTqA"},{"cell_type":"markdown","id":"bfc3108d","metadata":{"id":"bfc3108d"},"source":["## GAT"]},{"cell_type":"code","execution_count":null,"id":"f1f774f2","metadata":{"id":"f1f774f2"},"outputs":[],"source":["### ATTENTION\n","\n","from torch_geometric.nn import GATConv, Linear, to_hetero\n","\n","class GATLinkPrediction(torch.nn.Module):\n","    def __init__(self, hidden_channels, out_channels):\n","        super().__init__()\n","        self.conv1 = GATConv((-1, -1), hidden_channels, add_self_loops=False)\n","        #self.conv1=to_hetero(self.conv1, train_data.metadata(), aggr='sum')\n","        self.lin1 = Linear(-1, hidden_channels)\n","        self.conv2 = GATConv((-1, -1), out_channels, add_self_loops=False)\n","        self.lin2 = Linear(-1, out_channels)\n","        self.loss = torch.nn.BCEWithLogitsLoss()\n","    def forward(self, x_dict, edge_index_dict):\n","        x = self.conv1(x_dict, edge_index_dict)\n","        x = x.relu()\n","        x = self.conv2(x, edge_index_dict) + self.lin2(x)\n","        #x_dict['Company'] = x\n","\n","        out_dict = {}\n","        out = (x_dict[edge_index[0]] * x_dict[edge_index[1]]).sum(dim=-1)\n","        out_dict[relation_type] = out\n","\n","        return out_dict\n","\n","\n","model = GATLinkPrediction(hidden_channels=64, out_channels=2)\n","model = to_hetero(model, train_data.metadata(), aggr='sum')\n","optimizer = torch.optim.SGD(model.parameters(), lr=0.01)"]},{"cell_type":"markdown","id":"767a8ad1","metadata":{"id":"767a8ad1"},"source":["## RGAT-MTES"]},{"cell_type":"code","execution_count":84,"id":"dfb9075b","metadata":{"id":"dfb9075b","executionInfo":{"status":"ok","timestamp":1691975822365,"user_tz":-120,"elapsed":228,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"outputs":[],"source":["from torch_geometric.nn import RGATConv, GAE\n","import torch.nn.functional as F\n","from torch.nn import Parameter\n","\n","class RGAT(torch.nn.Module):\n","    def __init__(self, in_channels, hidden_channels,\n","                 num_relations,dim, attention_mechanism='across-relation', attention_mode='multiplicative-self-attention'):\n","        super().__init__()\n","        self.conv1 = RGATConv(in_channels, hidden_channels, num_relations,attention_mode= attention_mode,dim=dim)\n","        self.conv2 = RGATConv(dim*hidden_channels, hidden_channels, num_relations,attention_mode=attention_mode,dim=dim )\n","        #self.lin = torch.nn.Linear(-1, out_channels)\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        self.conv1.reset_parameters()\n","        self.conv2.reset_parameters()\n","\n","    def forward(self, x, edge_index, edge_type, edge_attr):\n","        #x = self.node_emb()\n","        x = self.conv1(x, edge_index, edge_type, edge_attr).relu()\n","        z = self.conv2(x, edge_index, edge_type, edge_attr)#.relu()\n","        #x = self.lin(x)\n","        return z  #F.log_softmax(x, dim=-1)\n","\n","\n","class DistMultDecoder(torch.nn.Module):\n","    def __init__(self, num_relations, hidden_channels):\n","        super().__init__()\n","        self.rel_emb = Parameter(torch.Tensor(num_relations, hidden_channels))\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        torch.nn.init.xavier_uniform_(self.rel_emb)\n","\n","    def forward(self, z, edge_label_index):\n","        scores={}\n","        for i in range(len(edge_types)):\n","                z_src, z_dst = z[edge_label_index[i+1][0]], z[edge_label_index[i+1][1]]\n","#         out=torch.empty(0)\n","#         for i in range(len(edge_type)):\n","#             #score=torch.sum(z_src[i]*rel_emb*z_dst[i], dim=1)\n","#             out=torch.cat([out,torch.max(torch.sum(z_src[i-1]*rel_emb*z_dst[i-1], dim=1).sigmoid(),dim=0,keepdim=True).indices+1],dim=-1)\n","#         pred=out#.to(torch.int64)\n","                scores[i]=torch.sum(z_src*self.rel_emb[i]*z_dst, dim=1)\n","        return  scores\n","\n","modelRGAT = GAE(\n","    RGAT(data['Company'].x.size(1),64, len(edge_types),dim=1),\n","    DistMultDecoder(len(edge_types), hidden_channels=64)).to(device)\n","optimizer = torch.optim.Adam(modelRGAT.parameters(), lr=0.01, weight_decay=0.01) # weight_decay=0.01 optima for 1 sector\n","modelRGAT.loss=torch.nn.BCEWithLogitsLoss()"]},{"cell_type":"code","source":["### SELF NODE EMBEDDING\n","from torch_geometric.nn import RGATConv, GAE\n","import torch.nn.functional as F\n","from torch.nn import Parameter\n","\n","class RGAT(torch.nn.Module):\n","    def __init__(self, num_nodes, hidden_channels, out_channels,\n","                 num_relations,dim, edge_dim=None ,attention_mechanism='within-relation', attention_mode='multiplicative-self-attention',\n","                 heads=1, concat=False):\n","        super().__init__()\n","        self.node_emb = Parameter(torch.Tensor(num_nodes, hidden_channels)) ##Initiliaze Learnable embedding vector (paper r-GAT)\n","        self.conv1 = RGATConv(hidden_channels, hidden_channels, num_relations,attention_mode= attention_mode,dim=dim,edge_dim=edge_dim,heads=heads,concat=concat )\n","        self.conv2 = RGATConv(dim*hidden_channels, out_channels, num_relations,attention_mode=attention_mode,dim=dim,edge_dim =edge_dim,heads=heads,concat=concat)\n","        #self.lin = torch.nn.Linear(-1, out_channels)\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        torch.nn.init.xavier_uniform_(self.node_emb)\n","        self.conv1.reset_parameters()\n","        self.conv2.reset_parameters()\n","\n","    def forward(self,  edge_index, edge_type, edge_attr=None):\n","        x = self.node_emb\n","        x = self.conv1(x, edge_index, edge_type, edge_attr).relu()\n","        z = self.conv2(x, edge_index, edge_type, edge_attr)#.relu()\n","        #x = self.lin(x)\n","        return z  #F.log_softmax(x, dim=-1)\n","\n","\n","class DistMultDecoder(torch.nn.Module):\n","    def __init__(self, num_relations, hidden_channels):\n","        super().__init__()\n","        self.rel_emb = Parameter(torch.Tensor(num_relations, hidden_channels))\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        torch.nn.init.xavier_uniform_(self.rel_emb)\n","\n","    def forward(self, z, edge_label_index):\n","        scores={}\n","        for i in range(len(edge_types)):\n","                z_src, z_dst = z[edge_label_index[i+1][0]], z[edge_label_index[i+1][1]]\n","#         out=torch.empty(0)\n","#         for i in range(len(edge_type)):\n","#             #score=torch.sum(z_src[i]*rel_emb*z_dst[i], dim=1)\n","#             out=torch.cat([out,torch.max(torch.sum(z_src[i-1]*rel_emb*z_dst[i-1], dim=1).sigmoid(),dim=0,keepdim=True).indices+1],dim=-1)\n","#         pred=out#.to(torch.int64)\n","                scores[i]=torch.sum(z_src*self.rel_emb[i]*z_dst, dim=1)\n","        return  scores\n"],"metadata":{"id":"q-5FMP98ByDP","executionInfo":{"status":"ok","timestamp":1691975827847,"user_tz":-120,"elapsed":248,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"id":"q-5FMP98ByDP","execution_count":85,"outputs":[]},{"cell_type":"code","source":["modelRGAT = GAE(\n","    RGAT(num_nodes=data.num_nodes,hidden_channels=32, out_channels=32, num_relations=len(edge_types),\n","         dim=1,attention_mechanism='across-relation',attention_mode='additive-self-attention',heads=1), #edge_dim=data['SUPPLIES'].edge_attr.size(-1)\n","    DistMultDecoder(len(edge_types), hidden_channels=32)).to(device)\n","optimizer = torch.optim.Adam(modelRGAT.parameters(), lr=0.01, weight_decay=0.005) # weight_decay=0.005 foptima for 1 sector(self)\n","modelRGAT.loss=torch.nn.BCEWithLogitsLoss()"],"metadata":{"id":"hJmCFDJOFKx0","executionInfo":{"status":"ok","timestamp":1691975931426,"user_tz":-120,"elapsed":297,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"id":"hJmCFDJOFKx0","execution_count":87,"outputs":[]},{"cell_type":"code","execution_count":null,"id":"7d7b1a3f","metadata":{"id":"7d7b1a3f"},"outputs":[],"source":["#Train with mini-batchs\n","def train_batch(model,epochs,train_loader):\n","    model.train()\n","    for epoch in range(epochs):\n","        total_examples = total_loss = 0\n","        #z_train=torch.empty([data.num_nodes, model.encoder.conv1.out_channels])\n","        for batch in train_loader:\n","            optimizer.zero_grad()\n","            batch = batch.to(device)\n","            batch_size = train_loader.batch_size\n","            edgetype, edge_indexes=torch.empty(1,0),torch.empty(2,0)\n","            labelled_edge_indexes={}\n","            labelled_edgetype={}\n","            #out={}\n","            i=1\n","            for key in edge_types:\n","                edge_indexes=torch.cat([edge_indexes,batch[key].edge_index],dim=-1).to(torch.int64)\n","                edgetype=torch.cat([edgetype,torch.full((1,batch[key].edge_index.size(1)),i-1)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes[i]=batch[key].edge_label_index\n","                labelled_edgetype[i]=batch[key].edge_label\n","                i+=1\n","            #edge_indexes=edge_indexes.view(-1)\n","            edgetype=edgetype.view(-1)\n","            #labelled_edgetype=labelled_edgetype.view(-1)\n","            #edge_labels=[torch.where(labelled_edgetype == i+1, 1, torch.tensor(0)).to(torch.float)  for i in  range(len(edge_types))]\n","            #labelled_edge_indexes=labelled_edge_indexes.view(-1)\n","            z = model.encode(data['Company'].x,edge_indexes, edge_type=edgetype,edge_attr=None)\n","            #z_train+=z*batch_size\n","\n","            out = model.decode(z, labelled_edge_indexes)\n","            #out_all=torch.stack([out[0].sigmoid(), out[1].sigmoid(),out[2].sigmoid(),out[3].sigmoid()])\n","            loss=float(0)\n","            for i in  range(len(edge_types)):\n","                loss += model.loss(out[i], labelled_edgetype[i+1])\n","            total_examples += batch_size\n","            total_loss += loss * batch_size\n","            #loss_final=total_loss/total_examples\n","            loss.backward()\n","            torch.nn.utils.clip_grad_norm_(model.parameters(), 1.)\n","            optimizer.step()\n","        print(f'Epoch: {epoch + 1},Loss: {total_loss/total_examples}')\n","        #z_trained=z_train/total_examples\n","    return  model"]},{"cell_type":"code","source":["#Train with mini-batchs SELF NODE\n","def train_batch(model,epochs):\n","    model.train()\n","    for epoch in range(epochs):\n","        total_examples = total_loss = 0\n","        #z_train=torch.empty([data.num_nodes, model.encoder.conv1.out_channels])\n","        for batch in train_loader:\n","            optimizer.zero_grad()\n","            batch = batch.to(device)\n","            batch_size = train_loader.batch_size\n","            edgeattr,edgetype, edge_indexes=torch.empty(1,0),torch.empty(1,0),torch.empty(2,0)\n","            labelled_edge_indexes={}\n","            labelled_edgetype={}\n","            #out={}\n","            i=1\n","            for key in edge_types:\n","                edge_indexes=torch.cat([edge_indexes,batch[key].edge_index],dim=-1).to(torch.int64)\n","                edgetype=torch.cat([edgetype,torch.full((1,batch[key].edge_index.size(1)),i-1)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes[i]=batch[key].edge_label_index\n","                labelled_edgetype[i]=batch[key].edge_label\n","                i+=1\n","            #edge_indexes=edge_indexes.view(-1)\n","            edgetype=edgetype.view(-1)\n","            #edgeattr=torch.cat([batch['SUPPLIES'].edge_attr,torch.full((1,edgetype.size(0)-batch['SUPPLIES'].edge_attr.size(0)),0).view(-1)],dim=-1).to(torch.int64)\n","            #labelled_edgetype=labelled_edgetype.view(-1)\n","            #edge_labels=[torch.where(labelled_edgetype == i+1, 1, torch.tensor(0)).to(torch.float)  for i in  range(len(edge_types))]\n","            #labelled_edge_indexes=labelled_edge_indexes.view(-1)\n","            z = model.encode(edge_indexes, edge_type=edgetype) #edge_dim=data['SUPPLIES'].edge_attr.size(-1)\n","            #z_train+=z*batch_size\n","\n","            out = model.decode(z, labelled_edge_indexes)\n","            #out_all=torch.stack([out[0].sigmoid(), out[1].sigmoid(),out[2].sigmoid(),out[3].sigmoid()])\n","            loss=float(0)\n","            for i in  range(len(edge_types)):\n","                loss += model.loss(out[i], labelled_edgetype[i+1])\n","            total_examples += batch_size\n","            total_loss += loss * batch_size\n","            #loss_final=total_loss/total_examples\n","            loss.backward()\n","            torch.nn.utils.clip_grad_norm_(model.parameters(), 1.)\n","            optimizer.step()\n","        print(f'Epoch: {epoch + 1},Loss: {total_loss/total_examples}')\n","        #z_trained=z_train/total_examples\n","    return  model"],"metadata":{"id":"MoD_dqAjFlM3","executionInfo":{"status":"ok","timestamp":1691975835881,"user_tz":-120,"elapsed":216,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"id":"MoD_dqAjFlM3","execution_count":86,"outputs":[]},{"cell_type":"code","execution_count":92,"id":"ffd1cf15","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ffd1cf15","outputId":"00ba357a-be3f-4e46-b88b-1485e426d399","executionInfo":{"status":"ok","timestamp":1691976279998,"user_tz":-120,"elapsed":120163,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 1,Loss: 2.2595930099487305\n","Epoch: 2,Loss: 2.2573392391204834\n","Epoch: 3,Loss: 2.259554624557495\n","Epoch: 4,Loss: 2.259889602661133\n","Epoch: 5,Loss: 2.2577784061431885\n","Epoch: 6,Loss: 2.258622407913208\n","Epoch: 7,Loss: 2.258622169494629\n","Epoch: 8,Loss: 2.2569210529327393\n","Epoch: 9,Loss: 2.25760555267334\n","Epoch: 10,Loss: 2.2595157623291016\n"]}],"source":["z_train=train_batch(modelRGAT,epochs=10)"]},{"cell_type":"code","execution_count":89,"id":"17900c22","metadata":{"id":"17900c22","executionInfo":{"status":"ok","timestamp":1691976002059,"user_tz":-120,"elapsed":233,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"outputs":[],"source":["from sklearn.metrics import roc_auc_score, accuracy_score, precision_score,confusion_matrix,ConfusionMatrixDisplay\n","\n","def evaluate(data,model):\n","    model.eval()\n","    #y_true, y_pred = [], []\n","    with torch.no_grad():\n","        edgetype, edge_indexes=torch.empty(1,0),torch.empty(2,0)\n","        labelled_edge_indexes={}\n","        labelled_edgetype={}\n","            #out={}\n","        i=1\n","        for key in edge_types:\n","                edge_indexes=torch.cat([edge_indexes,data[key].edge_index],dim=-1).to(torch.int64)\n","                edgetype=torch.cat([edgetype,torch.full((1,data[key].edge_index.size(1)),i-1)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes[i]=data[key].edge_label_index\n","                labelled_edgetype[i]=data[key].edge_label\n","                i+=1\n","            #edge_indexes=edge_indexes.view(-1)\n","        edgetype=edgetype.view(-1)\n","        z = model.encode(edge_indexes, edge_type=edgetype,edge_attr=None)\n","        scores = model.decode(z, labelled_edge_indexes)\n","        #scores_all=torch.stack([scores[0].sigmoid(), scores[1].sigmoid(),scores[2].sigmoid(),scores[3].sigmoid()])\n","    for i in  range(len(edge_types)):\n","            auc = roc_auc_score(labelled_edgetype[i+1].numpy(), scores[i].sigmoid().numpy())\n","            acc = accuracy_score(labelled_edgetype[i+1].numpy(), [1 if p >= 0.5 else 0 for p in scores[i].sigmoid().numpy()])\n","            prec = precision_score(labelled_edgetype[i+1].numpy(), [1 if p >= 0.5 else 0 for p in scores[i].sigmoid().numpy()])\n","            print(f\"AUC for class {i+1}: {auc:.4f}\")\n","            print(f\"accuracy for class {i+1}: {acc:.4f}\")\n","            #print(f\"precision for class {i+1}: {prec:.4f}\")\n","            #mat=confusion_matrix(labelled_edgetype[i+1].numpy(), [1 if p >= 0.5 else 0 for p in scores[i].sigmoid().numpy()])\n","            #disp = ConfusionMatrixDisplay(confusion_matrix=mat,display_labels=labelled_edgetype[i+1].unique())\n","            #disp.plot()\n","    return z\n"]},{"cell_type":"code","execution_count":93,"id":"d29b34ae","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d29b34ae","executionInfo":{"status":"ok","timestamp":1691977580927,"user_tz":-120,"elapsed":249,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"52ef3033-1bd2-49f1-cb27-6f57be575d76"},"outputs":[{"output_type":"stream","name":"stdout","text":["AUC for class 1: 0.8986\n","accuracy for class 1: 0.8362\n","AUC for class 2: 0.1314\n","accuracy for class 2: 0.1634\n","AUC for class 3: 0.1904\n","accuracy for class 3: 0.4239\n","AUC for class 4: 0.5936\n","accuracy for class 4: 0.6667\n"]},{"output_type":"execute_result","data":{"text/plain":["tensor([[-1.0318e-12, -6.5950e-01, -6.3519e-01,  ..., -8.8973e-05,\n","         -6.3685e-10,  1.2673e-02],\n","        [-1.0318e-12, -6.5950e-01, -6.3519e-01,  ..., -8.8973e-05,\n","         -6.3685e-10,  1.2673e-02],\n","        [-1.0318e-12, -6.5950e-01, -6.3519e-01,  ..., -8.8973e-05,\n","         -6.3685e-10,  1.2673e-02],\n","        ...,\n","        [-1.0318e-12, -6.5950e-01, -6.3519e-01,  ..., -8.8973e-05,\n","         -6.3685e-10,  1.2673e-02],\n","        [-1.0318e-12, -6.5950e-01, -6.3519e-01,  ..., -8.8973e-05,\n","         -6.3685e-10,  1.2673e-02],\n","        [-1.0318e-12, -6.5950e-01, -6.3519e-01,  ..., -8.8973e-05,\n","         -6.3685e-10,  1.2673e-02]])"]},"metadata":{},"execution_count":93}],"source":["# VALIDATE\n","evaluate(val_data,modelRGAT)"]},{"cell_type":"code","source":["#TEST\n","evaluate(test_data,modelRGAT)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RdzGz-PiqSWR","executionInfo":{"status":"ok","timestamp":1691977588050,"user_tz":-120,"elapsed":588,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"4eda2fb4-00b2-418e-e820-9c0cfde3492a"},"id":"RdzGz-PiqSWR","execution_count":94,"outputs":[{"output_type":"stream","name":"stdout","text":["AUC for class 1: 0.8985\n","accuracy for class 1: 0.8396\n","AUC for class 2: 0.1248\n","accuracy for class 2: 0.1646\n","AUC for class 3: 0.2079\n","accuracy for class 3: 0.4345\n","AUC for class 4: 0.5732\n","accuracy for class 4: 0.6406\n"]},{"output_type":"execute_result","data":{"text/plain":["tensor([[-1.0318e-12, -6.5950e-01, -6.3519e-01,  ..., -8.8973e-05,\n","         -6.3685e-10,  1.2673e-02],\n","        [-1.0318e-12, -6.5950e-01, -6.3519e-01,  ..., -8.8973e-05,\n","         -6.3685e-10,  1.2673e-02],\n","        [-1.0318e-12, -6.5950e-01, -6.3519e-01,  ..., -8.8973e-05,\n","         -6.3685e-10,  1.2673e-02],\n","        ...,\n","        [-1.0318e-12, -6.5950e-01, -6.3519e-01,  ..., -8.8973e-05,\n","         -6.3685e-10,  1.2673e-02],\n","        [-1.0318e-12, -6.5950e-01, -6.3519e-01,  ..., -8.8973e-05,\n","         -6.3685e-10,  1.2673e-02],\n","        [-1.0318e-12, -6.5950e-01, -6.3519e-01,  ..., -8.8973e-05,\n","         -6.3685e-10,  1.2673e-02]])"]},"metadata":{},"execution_count":94}]},{"cell_type":"code","source":["## TUNING\n","wd=[1e-3, 5e-3, 1e-2]\n","hid=[[32,32],[64,32],[64,64]]\n","mode=['multiplicative-self-attention','additive-self-attention']\n","mec=['within-relation','across-relation']\n","val_auc=np.empty((5,3))\n","test_auc=np.empty((5,3))\n","for h in hid:\n","    #c1=0\n","    for i in  wd:\n","            #c2=0\n","            modelRGAT = GAE(\n","                RGAT(num_nodes=data.num_nodes,hidden_channels=h[0], out_channels=h[1], num_relations=len(edge_types),dim=1,\n","                     attention_mode='additive-self-attention',attention_mechanism='within-relation',heads=1),\n","                DistMultDecoder(len(edge_types), hidden_channels=h[1])\n","                ).to(device)\n","            optimizer = torch.optim.Adam(modelRGAT.parameters(), lr=0.01, weight_decay=i)\n","            modelRGAT.loss=torch.nn.BCEWithLogitsLoss()\n","            print(f\"experiment for wd:{i} and channels:{h}\")\n","            train_batch(modelRGAT,epochs=7)\n","            evaluate(val_data,modelRGAT)\n","            evaluate(test_data,modelRGAT)\n","            #c2+=1\n","    #c2+=1\n","#print(val_auc)\n","#print(test_auc)\n",""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XRU-8N8tQFtE","executionInfo":{"status":"ok","timestamp":1691876273481,"user_tz":-120,"elapsed":7002138,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"23ee3cdd-0de8-41ce-df57-d2d500a37744"},"id":"XRU-8N8tQFtE","execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["experiment for wd:0.001 and channels:[32, 32]\n","Epoch: 1,Loss: 2.4957761764526367\n","Epoch: 2,Loss: 2.291349411010742\n","Epoch: 3,Loss: 2.2872672080993652\n","Epoch: 4,Loss: 2.28751802444458\n","Epoch: 5,Loss: 2.289825677871704\n","Epoch: 6,Loss: 2.2886903285980225\n","Epoch: 7,Loss: 2.2867276668548584\n","AUC for class 1: 0.9159\n","accuracy for class 1: 0.8316\n","AUC for class 2: 0.8863\n","accuracy for class 2: 0.8032\n","AUC for class 3: 0.8292\n","accuracy for class 3: 0.6123\n","AUC for class 4: 0.6669\n","accuracy for class 4: 0.6735\n","AUC for class 1: 0.9159\n","accuracy for class 1: 0.8296\n","AUC for class 2: 0.8914\n","accuracy for class 2: 0.8043\n","AUC for class 3: 0.8373\n","accuracy for class 3: 0.6384\n","AUC for class 4: 0.6070\n","accuracy for class 4: 0.6165\n","experiment for wd:0.005 and channels:[32, 32]\n","Epoch: 1,Loss: 2.533484697341919\n","Epoch: 2,Loss: 2.29428768157959\n","Epoch: 3,Loss: 2.294372797012329\n","Epoch: 4,Loss: 2.2969701290130615\n","Epoch: 5,Loss: 2.2939796447753906\n","Epoch: 6,Loss: 2.2926902770996094\n","Epoch: 7,Loss: 2.2921407222747803\n","AUC for class 1: 0.9090\n","accuracy for class 1: 0.8438\n","AUC for class 2: 0.8852\n","accuracy for class 2: 0.6077\n","AUC for class 3: 0.9119\n","accuracy for class 3: 0.6215\n","AUC for class 4: 0.7451\n","accuracy for class 4: 0.6868\n","AUC for class 1: 0.9115\n","accuracy for class 1: 0.8384\n","AUC for class 2: 0.8898\n","accuracy for class 2: 0.6357\n","AUC for class 3: 0.9007\n","accuracy for class 3: 0.6297\n","AUC for class 4: 0.6779\n","accuracy for class 4: 0.6308\n","experiment for wd:0.01 and channels:[32, 32]\n","Epoch: 1,Loss: 2.5495548248291016\n","Epoch: 2,Loss: 2.3031110763549805\n","Epoch: 3,Loss: 2.300236463546753\n","Epoch: 4,Loss: 2.300349473953247\n","Epoch: 5,Loss: 2.2999911308288574\n","Epoch: 6,Loss: 2.298872947692871\n","Epoch: 7,Loss: 2.297090530395508\n","AUC for class 1: 0.9083\n","accuracy for class 1: 0.8525\n","AUC for class 2: 0.8900\n","accuracy for class 2: 0.7824\n","AUC for class 3: 0.8971\n","accuracy for class 3: 0.5849\n","AUC for class 4: 0.7485\n","accuracy for class 4: 0.7536\n","AUC for class 1: 0.9106\n","accuracy for class 1: 0.8496\n","AUC for class 2: 0.8943\n","accuracy for class 2: 0.7833\n","AUC for class 3: 0.8855\n","accuracy for class 3: 0.5927\n","AUC for class 4: 0.6868\n","accuracy for class 4: 0.7135\n","experiment for wd:0.001 and channels:[64, 32]\n","Epoch: 1,Loss: 2.4818034172058105\n","Epoch: 2,Loss: 2.290692090988159\n","Epoch: 3,Loss: 2.2890982627868652\n","Epoch: 4,Loss: 2.2871174812316895\n","Epoch: 5,Loss: 2.287584066390991\n","Epoch: 6,Loss: 2.2868571281433105\n","Epoch: 7,Loss: 2.2871170043945312\n","AUC for class 1: 0.9090\n","accuracy for class 1: 0.8547\n","AUC for class 2: 0.8782\n","accuracy for class 2: 0.6217\n","AUC for class 3: 0.8120\n","accuracy for class 3: 0.6301\n","AUC for class 4: 0.6439\n","accuracy for class 4: 0.5000\n","AUC for class 1: 0.9122\n","accuracy for class 1: 0.8483\n","AUC for class 2: 0.8866\n","accuracy for class 2: 0.6425\n","AUC for class 3: 0.8179\n","accuracy for class 3: 0.6466\n","AUC for class 4: 0.5851\n","accuracy for class 4: 0.5000\n","experiment for wd:0.005 and channels:[64, 32]\n","Epoch: 1,Loss: 2.5020036697387695\n","Epoch: 2,Loss: 2.2957286834716797\n","Epoch: 3,Loss: 2.2960634231567383\n","Epoch: 4,Loss: 2.2958061695098877\n","Epoch: 5,Loss: 2.293532371520996\n","Epoch: 6,Loss: 2.294429302215576\n","Epoch: 7,Loss: 2.2938477993011475\n","AUC for class 1: 0.9076\n","accuracy for class 1: 0.8140\n","AUC for class 2: 0.8154\n","accuracy for class 2: 0.6045\n","AUC for class 3: 0.8223\n","accuracy for class 3: 0.6055\n","AUC for class 4: 0.6795\n","accuracy for class 4: 0.6673\n","AUC for class 1: 0.9107\n","accuracy for class 1: 0.8136\n","AUC for class 2: 0.8276\n","accuracy for class 2: 0.6292\n","AUC for class 3: 0.8347\n","accuracy for class 3: 0.6313\n","AUC for class 4: 0.6277\n","accuracy for class 4: 0.6139\n","experiment for wd:0.01 and channels:[64, 32]\n","Epoch: 1,Loss: 2.54618763923645\n","Epoch: 2,Loss: 2.3046863079071045\n","Epoch: 3,Loss: 2.303210496902466\n","Epoch: 4,Loss: 2.3017189502716064\n","Epoch: 5,Loss: 2.2991371154785156\n","Epoch: 6,Loss: 2.3007681369781494\n","Epoch: 7,Loss: 2.2983176708221436\n","AUC for class 1: 0.9093\n","accuracy for class 1: 0.8488\n","AUC for class 2: 0.8877\n","accuracy for class 2: 0.8068\n","AUC for class 3: 0.9102\n","accuracy for class 3: 0.6160\n","AUC for class 4: 0.7461\n","accuracy for class 4: 0.5000\n","AUC for class 1: 0.9117\n","accuracy for class 1: 0.8435\n","AUC for class 2: 0.8923\n","accuracy for class 2: 0.8154\n","AUC for class 3: 0.9022\n","accuracy for class 3: 0.6258\n","AUC for class 4: 0.6832\n","accuracy for class 4: 0.5000\n","experiment for wd:0.001 and channels:[64, 64]\n","Epoch: 1,Loss: 2.4753410816192627\n","Epoch: 2,Loss: 2.2875850200653076\n","Epoch: 3,Loss: 2.289907217025757\n","Epoch: 4,Loss: 2.2886312007904053\n","Epoch: 5,Loss: 2.2870378494262695\n","Epoch: 6,Loss: 2.2891080379486084\n","Epoch: 7,Loss: 2.289102792739868\n","AUC for class 1: 0.9136\n","accuracy for class 1: 0.8316\n","AUC for class 2: 0.8964\n","accuracy for class 2: 0.8045\n","AUC for class 3: 0.8328\n","accuracy for class 3: 0.6137\n","AUC for class 4: 0.6045\n","accuracy for class 4: 0.6735\n","AUC for class 1: 0.9147\n","accuracy for class 1: 0.8292\n","AUC for class 2: 0.9020\n","accuracy for class 2: 0.8052\n","AUC for class 3: 0.8376\n","accuracy for class 3: 0.6361\n","AUC for class 4: 0.5565\n","accuracy for class 4: 0.6165\n","experiment for wd:0.005 and channels:[64, 64]\n","Epoch: 1,Loss: 2.5012047290802\n","Epoch: 2,Loss: 2.29569673538208\n","Epoch: 3,Loss: 2.297004461288452\n","Epoch: 4,Loss: 2.2958202362060547\n","Epoch: 5,Loss: 2.29375958442688\n","Epoch: 6,Loss: 2.29394793510437\n","Epoch: 7,Loss: 2.295144557952881\n","AUC for class 1: 0.9096\n","accuracy for class 1: 0.8557\n","AUC for class 2: 0.8787\n","accuracy for class 2: 0.8262\n","AUC for class 3: 0.8975\n","accuracy for class 3: 0.8260\n","AUC for class 4: 0.7544\n","accuracy for class 4: 0.7642\n","AUC for class 1: 0.9123\n","accuracy for class 1: 0.8519\n","AUC for class 2: 0.8866\n","accuracy for class 2: 0.8339\n","AUC for class 3: 0.8904\n","accuracy for class 3: 0.8201\n","AUC for class 4: 0.6931\n","accuracy for class 4: 0.7229\n","experiment for wd:0.01 and channels:[64, 64]\n","Epoch: 1,Loss: 2.542742967605591\n","Epoch: 2,Loss: 2.3014228343963623\n","Epoch: 3,Loss: 2.3046936988830566\n","Epoch: 4,Loss: 2.3014283180236816\n","Epoch: 5,Loss: 2.300769090652466\n","Epoch: 6,Loss: 2.2981884479522705\n","Epoch: 7,Loss: 2.298769950866699\n","AUC for class 1: 0.9098\n","accuracy for class 1: 0.8501\n","AUC for class 2: 0.8881\n","accuracy for class 2: 0.7824\n","AUC for class 3: 0.9034\n","accuracy for class 3: 0.7918\n","AUC for class 4: 0.7811\n","accuracy for class 4: 0.7740\n","AUC for class 1: 0.9117\n","accuracy for class 1: 0.8444\n","AUC for class 2: 0.8927\n","accuracy for class 2: 0.7826\n","AUC for class 3: 0.8906\n","accuracy for class 3: 0.7817\n","AUC for class 4: 0.7267\n","accuracy for class 4: 0.7344\n"]}]},{"cell_type":"markdown","id":"763d208b","metadata":{"id":"763d208b"},"source":["## RGCN-MTES WITH LEARNABLE SELF EMBEDDING"]},{"cell_type":"code","execution_count":12,"id":"d66a8846","metadata":{"id":"d66a8846","executionInfo":{"status":"ok","timestamp":1692104474328,"user_tz":-120,"elapsed":1161,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"outputs":[],"source":["### MULTI-EDGETYPE SCORES\n","from torch_geometric.nn import GAE, RGCNConv\n","from torch.nn import Parameter\n","class RGCNEncoder(torch.nn.Module):\n","    def __init__(self, num_nodes, hidden_channels,out_channels,num_relations):\n","        super().__init__()\n","        self.node_emb = Parameter(torch.Tensor(num_nodes, hidden_channels)) ##Initiliaze Learnable embedding vector (paper r-GAT)\n","        self.conv1 = RGCNConv(hidden_channels, hidden_channels, num_relations)\n","        self.conv2 = RGCNConv(hidden_channels, out_channels, num_relations)\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        torch.nn.init.xavier_uniform_(self.node_emb)\n","        self.conv1.reset_parameters()\n","        self.conv2.reset_parameters()\n","\n","    def forward(self, edge_index, edge_type):\n","        x = self.node_emb\n","        x = self.conv1(x, edge_index, edge_type).relu_()\n","        #x = F.dropout(x, p=0.2, training=self.training)\n","        z = self.conv2(x, edge_index, edge_type).relu()\n","        return z\n","\n","\n","class DistMultDecoder(torch.nn.Module):\n","    def __init__(self, num_relations, hidden_channels):\n","        super().__init__()\n","        self.rel_emb = Parameter(torch.Tensor(num_relations, hidden_channels))\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        torch.nn.init.xavier_uniform_(self.rel_emb)\n","\n","    def forward(self, z, edge_label_index):\n","        scores={}\n","        for i in range(len(edge_types)):\n","                z_src, z_dst = z[edge_label_index[i+1][0]], z[edge_label_index[i+1][1]]\n","#         out=torch.empty(0)\n","#         for i in range(len(edge_type)):\n","#             #score=torch.sum(z_src[i]*rel_emb*z_dst[i], dim=1)\n","#             out=torch.cat([out,torch.max(torch.sum(z_src[i-1]*rel_emb*z_dst[i-1], dim=1).sigmoid(),dim=0,keepdim=True).indices+1],dim=-1)\n","#         pred=out#.to(torch.int64)\n","                scores[i]=torch.sum(z_src*self.rel_emb[i]*z_dst, dim=1)\n","        return  scores\n","\n","modelRGCN = GAE(\n","    RGCNEncoder(data.num_nodes, hidden_channels=64, out_channels=64,num_relations=len(edge_types)),\n","    DistMultDecoder(len(edge_types), hidden_channels=64)\n",")\n","optimizer = torch.optim.Adam(modelRGCN.parameters(), lr=0.01, weight_decay=0.01) # weight_decay=5*1e-3 optimal for 1 sector, 5e-2 for 2 sector\n","modelRGCN.loss=torch.nn.BCEWithLogitsLoss() #pos_weight = torch.ones([1])"]},{"cell_type":"code","execution_count":13,"id":"331e5d55","metadata":{"id":"331e5d55","executionInfo":{"status":"ok","timestamp":1692104478117,"user_tz":-120,"elapsed":352,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"outputs":[],"source":["#Train with mini-batchs\n","def train_batch(model,epochs):\n","    model.train()\n","    for epoch in range(epochs):\n","        total_examples = total_loss = 0\n","        #z_train=torch.empty([data.num_nodes, model.encoder.conv1.out_channels])\n","        for batch in train_loader:\n","            optimizer.zero_grad()\n","            batch = batch.to(device)\n","            batch_size = train_loader.batch_size\n","            edgetype, edge_indexes=torch.empty(1,0),torch.empty(2,0)\n","            labelled_edge_indexes={}\n","            labelled_edgetype={}\n","            #out={}\n","            i=1\n","            for key in edge_types:\n","                edge_indexes=torch.cat([edge_indexes,batch[key].edge_index],dim=-1).to(torch.int64)\n","                edgetype=torch.cat([edgetype,torch.full((1,batch[key].edge_index.size(1)),i-1)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes[i]=batch[key].edge_label_index\n","                labelled_edgetype[i]=batch[key].edge_label\n","                i+=1\n","            #edge_indexes=edge_indexes.view(-1)\n","            edgetype=edgetype.view(-1)\n","            #labelled_edgetype=labelled_edgetype.view(-1)\n","            #edge_labels=[torch.where(labelled_edgetype == i+1, 1, torch.tensor(0)).to(torch.float)  for i in  range(len(edge_types))]\n","            #labelled_edge_indexes=labelled_edge_indexes.view(-1)\n","            z = model.encode(edge_indexes, edge_type=edgetype)\n","            #z_train+=z*batch_size\n","\n","            out = model.decode(z, labelled_edge_indexes)\n","            #out_all=torch.stack([out[0].sigmoid(), out[1].sigmoid(),out[2].sigmoid(),out[3].sigmoid()])\n","            loss=float(0)\n","            for i in  range(len(edge_types)):\n","                loss += model.loss(out[i], labelled_edgetype[i+1])\n","            total_examples += batch_size\n","            total_loss += loss * batch_size\n","            #loss_final=total_loss/total_examples\n","            loss.backward()\n","            torch.nn.utils.clip_grad_norm_(model.parameters(), 1.)\n","            optimizer.step()\n","        print(f'Epoch: {epoch + 1},Loss: {total_loss/total_examples}')\n","        #z_trained=z_train/total_examples\n","    return  model"]},{"cell_type":"code","execution_count":null,"id":"d3bb75e3","metadata":{"id":"d3bb75e3"},"outputs":[],"source":["modelRGCN_trained=train_batch(modelRGCN,epochs=5)"]},{"cell_type":"code","execution_count":54,"id":"2671f4ab","metadata":{"id":"2671f4ab","executionInfo":{"status":"ok","timestamp":1691854902361,"user_tz":-120,"elapsed":234,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"outputs":[],"source":["from sklearn.metrics import roc_auc_score, accuracy_score, precision_score,confusion_matrix,ConfusionMatrixDisplay,top_k_accuracy_score\n","#import tensorflow_ranking as tfr\n","def evaluate(data,model):\n","    model.eval()\n","    #y_true, y_pred = [], []\n","    with torch.no_grad():\n","        edgetype, edge_indexes=torch.empty(1,0),torch.empty(2,0)\n","        labelled_edge_indexes={}\n","        labelled_edgetype={}\n","            #out={}\n","        i=1\n","        for key in edge_types:\n","                edge_indexes=torch.cat([edge_indexes,data[key].edge_index],dim=-1).to(torch.int64)\n","                edgetype=torch.cat([edgetype,torch.full((1,data[key].edge_index.size(1)),i-1)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes[i]=data[key].edge_label_index\n","                labelled_edgetype[i]=data[key].edge_label\n","                i+=1\n","            #edge_indexes=edge_indexes.view(-1)\n","        edgetype=edgetype.view(-1)\n","        z = model.encode(edge_indexes, edge_type=edgetype)\n","        scores = model.decode(z, labelled_edge_indexes)\n","        #scores_all=torch.stack([scores[0].sigmoid(), scores[1].sigmoid(),scores[2].sigmoid(),scores[3].sigmoid()])\n","    for i in  range(len(edge_types)):\n","            auc = roc_auc_score(labelled_edgetype[i+1].numpy(), scores[i].sigmoid().numpy())\n","            acc = accuracy_score(labelled_edgetype[i+1].numpy(), [1 if p >= 0.5 else 0 for p in scores[i].sigmoid().numpy()])\n","            prec = precision_score(labelled_edgetype[i+1].numpy(), [1 if p >= 0.5 else 0 for p in scores[i].sigmoid().numpy()])\n","            #hit2=top_k_accuracy_score(labelled_edgetype[i+1].numpy(), scores[i].sigmoid().numpy(), k=2)\n","            #hits_at_10 = tfr.keras.metrics.HitsMetric(topn=10)\n","            #hits_at_10(labelled_edgetype[i+1].numpy(), scores[i].sigmoid().numpy()).numpy()\n","            print(f\"AUC for class {i+1}: {auc:.4f}\")\n","            print(f\"Accuracy for class {i+1}: {acc:.4f}\")\n","            #print(f\"Precision for class {i+1}: {prec:.4f}\")\n","            #print(f\"top2 for class {i+1}: {hit2:.4f}\")\n","            #print(f\"hit10 for class {i+1}: {hits_at_10:.4f}\")\n","            #mat=confusion_matrix(labelled_edgetype[i+1].numpy(), [1 if p >= 0.5 else 0 for p in scores[i].sigmoid().numpy()])\n","            #disp = ConfusionMatrixDisplay(confusion_matrix=mat,display_labels=labelled_edgetype[i+1].unique())\n","            #disp.plot()\n","    return auc\n"]},{"cell_type":"code","source":["hits_at_2 = tfr.keras.metrics.HitsMetric(topn=10)\n","hits_at_2(y_true, y_pred).numpy()\n","sklearn.metrics.top_k_accuracy_score(y_true, y_score, *, k=10)"],"metadata":{"id":"IhMFfBPD8PiM"},"id":"IhMFfBPD8PiM","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#VALIDATE\n","evaluate(val_data,modelRGCN)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yum3pYTeIKg1","executionInfo":{"status":"ok","timestamp":1691766672812,"user_tz":-120,"elapsed":243,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"35b95315-efe6-42ab-9c88-91d6b0945f5c"},"id":"Yum3pYTeIKg1","execution_count":181,"outputs":[{"output_type":"stream","name":"stdout","text":["AUC for class 1: 0.9321\n","Accuracy for class 1: 0.8648\n","Precision for class 1: 0.9479\n","top2 for class 1: 1.0000\n","AUC for class 2: 0.8775\n","Accuracy for class 2: 0.8018\n","Precision for class 2: 0.7761\n","top2 for class 2: 1.0000\n","AUC for class 3: 0.9159\n","Accuracy for class 3: 0.8488\n","Precision for class 3: 0.8274\n","top2 for class 3: 1.0000\n","AUC for class 4: 0.6726\n","Accuracy for class 4: 0.6190\n","Precision for class 4: 0.5909\n","top2 for class 4: 1.0000\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_ranking.py:1802: UndefinedMetricWarning: 'k' (2) greater than or equal to 'n_classes' (2) will result in a perfect score and is therefore meaningless.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_ranking.py:1802: UndefinedMetricWarning: 'k' (2) greater than or equal to 'n_classes' (2) will result in a perfect score and is therefore meaningless.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_ranking.py:1802: UndefinedMetricWarning: 'k' (2) greater than or equal to 'n_classes' (2) will result in a perfect score and is therefore meaningless.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_ranking.py:1802: UndefinedMetricWarning: 'k' (2) greater than or equal to 'n_classes' (2) will result in a perfect score and is therefore meaningless.\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["0.6726367630385488"]},"metadata":{},"execution_count":181}]},{"cell_type":"code","source":["z[0].sigmoid()\n","#l[1].size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kKyuvtPJ1F9w","executionInfo":{"status":"ok","timestamp":1691762189259,"user_tz":-120,"elapsed":618,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"7a98239b-792d-499a-fec6-6fe75d3f4cd3"},"id":"kKyuvtPJ1F9w","execution_count":151,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([0.9809, 0.9988, 0.8724,  ..., 0.0039, 0.0096, 0.3459])"]},"metadata":{},"execution_count":151}]},{"cell_type":"code","execution_count":161,"id":"69675785","metadata":{"id":"69675785","outputId":"6bbc5209-690f-42f9-8a3a-04c95f351bc6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1691762783931,"user_tz":-120,"elapsed":264,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["AUC for class 1: 0.9495\n","Accuracy for class 1: 0.8643\n","Precision for class 1: 0.8309\n","top2 for class 1: 1.0000\n","AUC for class 2: 0.0673\n","Accuracy for class 2: 0.4023\n","Precision for class 2: 0.0380\n","top2 for class 2: 1.0000\n","AUC for class 3: 0.6939\n","Accuracy for class 3: 0.7315\n","Precision for class 3: 0.6894\n","top2 for class 3: 1.0000\n","AUC for class 4: 0.6735\n","Accuracy for class 4: 0.6667\n","Precision for class 4: 0.6321\n","top2 for class 4: 1.0000\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_ranking.py:1802: UndefinedMetricWarning: 'k' (2) greater than or equal to 'n_classes' (2) will result in a perfect score and is therefore meaningless.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_ranking.py:1802: UndefinedMetricWarning: 'k' (2) greater than or equal to 'n_classes' (2) will result in a perfect score and is therefore meaningless.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_ranking.py:1802: UndefinedMetricWarning: 'k' (2) greater than or equal to 'n_classes' (2) will result in a perfect score and is therefore meaningless.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_ranking.py:1802: UndefinedMetricWarning: 'k' (2) greater than or equal to 'n_classes' (2) will result in a perfect score and is therefore meaningless.\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["0.6734527795493197"]},"metadata":{},"execution_count":161}],"source":["# TEST\n","evaluate(test_data,modelRGCN_trained)"]},{"cell_type":"code","source":["torch.cartesian_prod(torch.arange(data['Company'].num_nodes),torch.arange(data['Company'].num_nodes))\n"],"metadata":{"id":"LtdDBRKjenlz"},"id":"LtdDBRKjenlz","execution_count":null,"outputs":[]},{"cell_type":"code","source":["## TUNING\n","wd=[0, 1e-3, 5e-3,1e-2]\n","hid=[[32,32],[64,32],[64,64]]\n","val_auc=np.empty((5,3))\n","test_auc=np.empty((5,3))\n","for i in  wd:\n","    #c1=0\n","    for h in hid:\n","            #c2=0\n","            modelRGCN = GAE(\n","              RGCNEncoder(data.num_nodes, hidden_channels=h[0], out_channels=h[1],num_relations=len(edge_types)),\n","               DistMultDecoder(len(edge_types), hidden_channels=h[1])\n","            )\n","            optimizer = torch.optim.Adam(modelRGCN.parameters(), lr=0.01, weight_decay=i) # weight_decay=5*1e-3 optimal for 1 sector, 5e-2 for 2 sector\n","            modelRGCN.loss=torch.nn.BCEWithLogitsLoss() #pos_weight = torch.ones([1])\n","            print(f\"experiment for wd: {i} and channels: {h}\")\n","            train_batch(modelRGCN,epochs=10)\n","            evaluate(val_data,modelRGCN)\n","            evaluate(test_data,modelRGCN)\n","            #c2+=1\n","    #c2+=1\n","#print(val_auc)\n","#print(test_auc)\n","\n",""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MmlWyyan7JcV","executionInfo":{"status":"ok","timestamp":1691857010150,"user_tz":-120,"elapsed":1064058,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"0c820680-5566-4f5e-f49a-20b5b30166bc"},"id":"MmlWyyan7JcV","execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["experiment for wd: 0 and channels: [32, 32]\n","Epoch: 1,Loss: 1.752866506576538\n","Epoch: 2,Loss: 0.274217426776886\n","Epoch: 3,Loss: 0.2092653512954712\n","Epoch: 4,Loss: 0.19209633767604828\n","Epoch: 5,Loss: 0.18260638415813446\n","Epoch: 6,Loss: 0.1748121976852417\n","Epoch: 7,Loss: 0.16120800375938416\n","Epoch: 8,Loss: 0.15329553186893463\n","Epoch: 9,Loss: 0.14600950479507446\n","Epoch: 10,Loss: 0.14112739264965057\n","AUC for class 1: 0.9384\n","Accuracy for class 1: 0.8725\n","AUC for class 2: 0.5061\n","Accuracy for class 2: 0.5167\n","AUC for class 3: 0.5157\n","Accuracy for class 3: 0.4854\n","AUC for class 4: 0.5078\n","Accuracy for class 4: 0.5018\n","AUC for class 1: 0.9320\n","Accuracy for class 1: 0.8614\n","AUC for class 2: 0.4802\n","Accuracy for class 2: 0.5088\n","AUC for class 3: 0.5003\n","Accuracy for class 3: 0.4920\n","AUC for class 4: 0.4995\n","Accuracy for class 4: 0.4898\n","experiment for wd: 0 and channels: [64, 32]\n","Epoch: 1,Loss: 1.260457158088684\n","Epoch: 2,Loss: 0.23666472733020782\n","Epoch: 3,Loss: 0.19805175065994263\n","Epoch: 4,Loss: 0.17646467685699463\n","Epoch: 5,Loss: 0.1735374480485916\n","Epoch: 6,Loss: 0.1650124043226242\n","Epoch: 7,Loss: 0.15268667042255402\n","Epoch: 8,Loss: 0.14809562265872955\n","Epoch: 9,Loss: 0.14193566143512726\n","Epoch: 10,Loss: 0.13658607006072998\n","AUC for class 1: 0.9398\n","Accuracy for class 1: 0.8786\n","AUC for class 2: 0.6160\n","Accuracy for class 2: 0.5235\n","AUC for class 3: 0.5963\n","Accuracy for class 3: 0.4886\n","AUC for class 4: 0.5896\n","Accuracy for class 4: 0.5525\n","AUC for class 1: 0.9351\n","Accuracy for class 1: 0.8659\n","AUC for class 2: 0.6029\n","Accuracy for class 2: 0.5170\n","AUC for class 3: 0.5866\n","Accuracy for class 3: 0.4911\n","AUC for class 4: 0.5916\n","Accuracy for class 4: 0.5440\n","experiment for wd: 0 and channels: [64, 64]\n","Epoch: 1,Loss: 1.347055435180664\n","Epoch: 2,Loss: 0.2433246374130249\n","Epoch: 3,Loss: 0.1913987398147583\n","Epoch: 4,Loss: 0.17893823981285095\n","Epoch: 5,Loss: 0.1617627739906311\n","Epoch: 6,Loss: 0.15292799472808838\n","Epoch: 7,Loss: 0.14147251844406128\n","Epoch: 8,Loss: 0.13776461780071259\n","Epoch: 9,Loss: 0.13767391443252563\n","Epoch: 10,Loss: 0.1282597929239273\n","AUC for class 1: 0.9447\n","Accuracy for class 1: 0.8805\n","AUC for class 2: 0.5583\n","Accuracy for class 2: 0.5041\n","AUC for class 3: 0.4947\n","Accuracy for class 3: 0.4881\n","AUC for class 4: 0.4533\n","Accuracy for class 4: 0.4875\n","AUC for class 1: 0.9390\n","Accuracy for class 1: 0.8650\n","AUC for class 2: 0.5676\n","Accuracy for class 2: 0.5229\n","AUC for class 3: 0.4798\n","Accuracy for class 3: 0.4804\n","AUC for class 4: 0.4699\n","Accuracy for class 4: 0.5022\n","experiment for wd: 0.001 and channels: [32, 32]\n","Epoch: 1,Loss: 2.6006577014923096\n","Epoch: 2,Loss: 1.1628034114837646\n","Epoch: 3,Loss: 0.29980623722076416\n","Epoch: 4,Loss: 0.22248958051204681\n","Epoch: 5,Loss: 0.21769410371780396\n","Epoch: 6,Loss: 0.21486277878284454\n","Epoch: 7,Loss: 0.20769435167312622\n","Epoch: 8,Loss: 0.2022438496351242\n","Epoch: 9,Loss: 0.20650309324264526\n","Epoch: 10,Loss: 0.20512297749519348\n","AUC for class 1: 0.9475\n","Accuracy for class 1: 0.8803\n","AUC for class 2: 0.4017\n","Accuracy for class 2: 0.5095\n","AUC for class 3: 0.3523\n","Accuracy for class 3: 0.4986\n","AUC for class 4: 0.6146\n","Accuracy for class 4: 0.5125\n","AUC for class 1: 0.9468\n","Accuracy for class 1: 0.8749\n","AUC for class 2: 0.3906\n","Accuracy for class 2: 0.5036\n","AUC for class 3: 0.3389\n","Accuracy for class 3: 0.4925\n","AUC for class 4: 0.5890\n","Accuracy for class 4: 0.5133\n","experiment for wd: 0.001 and channels: [64, 32]\n","Epoch: 1,Loss: 2.4421563148498535\n","Epoch: 2,Loss: 0.7007588148117065\n","Epoch: 3,Loss: 0.2676062285900116\n","Epoch: 4,Loss: 0.22815731167793274\n","Epoch: 5,Loss: 0.21702133119106293\n","Epoch: 6,Loss: 0.22375796735286713\n","Epoch: 7,Loss: 0.2185029536485672\n","Epoch: 8,Loss: 0.21092571318149567\n","Epoch: 9,Loss: 0.21050269901752472\n","Epoch: 10,Loss: 0.22113996744155884\n","AUC for class 1: 0.9471\n","Accuracy for class 1: 0.8795\n","AUC for class 2: 0.4732\n","Accuracy for class 2: 0.5204\n","AUC for class 3: 0.2591\n","Accuracy for class 3: 0.4986\n","AUC for class 4: 0.4419\n","Accuracy for class 4: 0.4973\n","AUC for class 1: 0.9469\n","Accuracy for class 1: 0.8733\n","AUC for class 2: 0.4552\n","Accuracy for class 2: 0.5106\n","AUC for class 3: 0.2384\n","Accuracy for class 3: 0.4897\n","AUC for class 4: 0.4170\n","Accuracy for class 4: 0.5062\n","experiment for wd: 0.001 and channels: [64, 64]\n","Epoch: 1,Loss: 2.5556282997131348\n","Epoch: 2,Loss: 0.8422189354896545\n","Epoch: 3,Loss: 0.2730579972267151\n","Epoch: 4,Loss: 0.2284097969532013\n","Epoch: 5,Loss: 0.22257398068904877\n","Epoch: 6,Loss: 0.22875702381134033\n","Epoch: 7,Loss: 0.22061924636363983\n","Epoch: 8,Loss: 0.215889111161232\n","Epoch: 9,Loss: 0.21217848360538483\n","Epoch: 10,Loss: 0.21572719514369965\n","AUC for class 1: 0.9466\n","Accuracy for class 1: 0.8782\n","AUC for class 2: 0.5990\n","Accuracy for class 2: 0.5181\n","AUC for class 3: 0.3330\n","Accuracy for class 3: 0.5068\n","AUC for class 4: 0.5873\n","Accuracy for class 4: 0.5062\n","AUC for class 1: 0.9442\n","Accuracy for class 1: 0.8733\n","AUC for class 2: 0.5715\n","Accuracy for class 2: 0.5100\n","AUC for class 3: 0.3103\n","Accuracy for class 3: 0.4950\n","AUC for class 4: 0.5772\n","Accuracy for class 4: 0.5156\n","experiment for wd: 0.005 and channels: [32, 32]\n","Epoch: 1,Loss: 2.717623710632324\n","Epoch: 2,Loss: 2.3631889820098877\n","Epoch: 3,Loss: 2.2912285327911377\n","Epoch: 4,Loss: 2.287860155105591\n","Epoch: 5,Loss: 2.290144443511963\n","Epoch: 6,Loss: 2.2889037132263184\n","Epoch: 7,Loss: 2.290015697479248\n","Epoch: 8,Loss: 2.2901570796966553\n","Epoch: 9,Loss: 2.2897868156433105\n","Epoch: 10,Loss: 2.287426233291626\n","AUC for class 1: 0.9463\n","Accuracy for class 1: 0.8805\n","AUC for class 2: 0.8738\n","Accuracy for class 2: 0.7452\n","AUC for class 3: 0.7863\n","Accuracy for class 3: 0.7502\n","AUC for class 4: 0.7389\n","Accuracy for class 4: 0.6655\n","AUC for class 1: 0.9451\n","Accuracy for class 1: 0.8723\n","AUC for class 2: 0.8799\n","Accuracy for class 2: 0.7423\n","AUC for class 3: 0.7854\n","Accuracy for class 3: 0.7354\n","AUC for class 4: 0.7460\n","Accuracy for class 4: 0.6579\n","experiment for wd: 0.005 and channels: [64, 32]\n","Epoch: 1,Loss: 2.6482553482055664\n","Epoch: 2,Loss: 2.3236563205718994\n","Epoch: 3,Loss: 2.2912917137145996\n","Epoch: 4,Loss: 2.291372537612915\n","Epoch: 5,Loss: 2.294609785079956\n","Epoch: 6,Loss: 2.288219690322876\n","Epoch: 7,Loss: 2.289203405380249\n","Epoch: 8,Loss: 2.288447856903076\n","Epoch: 9,Loss: 2.2894318103790283\n","Epoch: 10,Loss: 2.2898077964782715\n","AUC for class 1: 0.9462\n","Accuracy for class 1: 0.8810\n","AUC for class 2: 0.7246\n","Accuracy for class 2: 0.7498\n","AUC for class 3: 0.6135\n","Accuracy for class 3: 0.6169\n","AUC for class 4: 0.5394\n","Accuracy for class 4: 0.6468\n","AUC for class 1: 0.9448\n","Accuracy for class 1: 0.8723\n","AUC for class 2: 0.7248\n","Accuracy for class 2: 0.7505\n","AUC for class 3: 0.5867\n","Accuracy for class 3: 0.6087\n","AUC for class 4: 0.5250\n","Accuracy for class 4: 0.6379\n","experiment for wd: 0.005 and channels: [64, 64]\n","Epoch: 1,Loss: 2.6265347003936768\n","Epoch: 2,Loss: 2.3158419132232666\n","Epoch: 3,Loss: 2.295116901397705\n","Epoch: 4,Loss: 2.2946531772613525\n","Epoch: 5,Loss: 2.291614532470703\n","Epoch: 6,Loss: 2.29007887840271\n","Epoch: 7,Loss: 2.289172649383545\n","Epoch: 8,Loss: 2.2921409606933594\n","Epoch: 9,Loss: 2.286983013153076\n","Epoch: 10,Loss: 2.287167549133301\n","AUC for class 1: 0.9458\n","Accuracy for class 1: 0.8808\n","AUC for class 2: 0.7737\n","Accuracy for class 2: 0.7434\n","AUC for class 3: 0.7974\n","Accuracy for class 3: 0.7187\n","AUC for class 4: 0.7428\n","Accuracy for class 4: 0.6521\n","AUC for class 1: 0.9446\n","Accuracy for class 1: 0.8739\n","AUC for class 2: 0.7769\n","Accuracy for class 2: 0.7394\n","AUC for class 3: 0.7970\n","Accuracy for class 3: 0.7068\n","AUC for class 4: 0.7527\n","Accuracy for class 4: 0.6339\n","experiment for wd: 0.01 and channels: [32, 32]\n","Epoch: 1,Loss: 2.6965439319610596\n","Epoch: 2,Loss: 2.365255832672119\n","Epoch: 3,Loss: 2.2974512577056885\n","Epoch: 4,Loss: 2.2950494289398193\n","Epoch: 5,Loss: 2.2919719219207764\n","Epoch: 6,Loss: 2.2918200492858887\n","Epoch: 7,Loss: 2.2938649654388428\n","Epoch: 8,Loss: 2.2932684421539307\n","Epoch: 9,Loss: 2.2894036769866943\n","Epoch: 10,Loss: 2.290487289428711\n","AUC for class 1: 0.9462\n","Accuracy for class 1: 0.8788\n","AUC for class 2: 0.2642\n","Accuracy for class 2: 0.3955\n","AUC for class 3: 0.2857\n","Accuracy for class 3: 0.4164\n","AUC for class 4: 0.5882\n","Accuracy for class 4: 0.6459\n","AUC for class 1: 0.9454\n","Accuracy for class 1: 0.8742\n","AUC for class 2: 0.2482\n","Accuracy for class 2: 0.3867\n","AUC for class 3: 0.2626\n","Accuracy for class 3: 0.3973\n","AUC for class 4: 0.5791\n","Accuracy for class 4: 0.6566\n","experiment for wd: 0.01 and channels: [64, 32]\n","Epoch: 1,Loss: 2.665412187576294\n","Epoch: 2,Loss: 2.323923110961914\n","Epoch: 3,Loss: 2.290984869003296\n","Epoch: 4,Loss: 2.292069911956787\n","Epoch: 5,Loss: 2.2949132919311523\n","Epoch: 6,Loss: 2.2959370613098145\n","Epoch: 7,Loss: 2.292478322982788\n","Epoch: 8,Loss: 2.2912650108337402\n","Epoch: 9,Loss: 2.2898736000061035\n","Epoch: 10,Loss: 2.293034076690674\n","AUC for class 1: 0.9458\n","Accuracy for class 1: 0.8810\n","AUC for class 2: 0.5765\n","Accuracy for class 2: 0.5665\n","AUC for class 3: 0.3689\n","Accuracy for class 3: 0.4507\n","AUC for class 4: 0.6741\n","Accuracy for class 4: 0.6441\n","AUC for class 1: 0.9422\n","Accuracy for class 1: 0.8723\n","AUC for class 2: 0.5623\n","Accuracy for class 2: 0.5452\n","AUC for class 3: 0.3366\n","Accuracy for class 3: 0.4251\n","AUC for class 4: 0.6801\n","Accuracy for class 4: 0.6535\n","experiment for wd: 0.01 and channels: [64, 64]\n","Epoch: 1,Loss: 2.691416025161743\n","Epoch: 2,Loss: 2.335228204727173\n","Epoch: 3,Loss: 2.2987163066864014\n","Epoch: 4,Loss: 2.3017935752868652\n","Epoch: 5,Loss: 2.292856216430664\n","Epoch: 6,Loss: 2.292248249053955\n","Epoch: 7,Loss: 2.292733907699585\n","Epoch: 8,Loss: 2.291308641433716\n","Epoch: 9,Loss: 2.2934787273406982\n","Epoch: 10,Loss: 2.2943763732910156\n","AUC for class 1: 0.9469\n","Accuracy for class 1: 0.8786\n","AUC for class 2: 0.8886\n","Accuracy for class 2: 0.7484\n","AUC for class 3: 0.8987\n","Accuracy for class 3: 0.7397\n","AUC for class 4: 0.7411\n","Accuracy for class 4: 0.6655\n","AUC for class 1: 0.9456\n","Accuracy for class 1: 0.8725\n","AUC for class 2: 0.8977\n","Accuracy for class 2: 0.7471\n","AUC for class 3: 0.8984\n","Accuracy for class 3: 0.7242\n","AUC for class 4: 0.7570\n","Accuracy for class 4: 0.6579\n"]}]},{"cell_type":"code","source":["np.set_printoptions(precision=6, suppress=True)\n","val_auc\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QA07sPl0_XjJ","executionInfo":{"status":"ok","timestamp":1691766303815,"user_tz":-120,"elapsed":346,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"ec49ef33-a610-4e1e-f7ae-ad2953d8ef3b"},"id":"QA07sPl0_XjJ","execution_count":178,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.645107, 0.000096, 0.000093],\n","       [0.000075, 0.000065, 0.00006 ],\n","       [0.000059, 0.000057, 0.000053],\n","       [0.000052, 0.000048, 0.000042],\n","       [0.000035, 0.000033, 0.000028]])"]},"metadata":{},"execution_count":178}]},{"cell_type":"markdown","source":["## RGCN-MTES WITH ACTUAL FEATURE"],"metadata":{"id":"wLgplryrXGac"},"id":"wLgplryrXGac"},{"cell_type":"code","execution_count":23,"metadata":{"executionInfo":{"status":"ok","timestamp":1692106255121,"user_tz":-120,"elapsed":286,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"id":"63h6MHdHXNct"},"outputs":[],"source":["### MULTI-EDGETYPE SCORES\n","from torch_geometric.nn import GAE, RGCNConv\n","from torch.nn import Parameter\n","class RGCNEncoder(torch.nn.Module):\n","    def __init__(self, num_nodes, feature_dim,hidden_channels,out_channels,num_relations):\n","        super().__init__()\n","        #self.node_emb = Parameter(torch.Tensor(num_nodes, hidden_channels)) ##Initiliaze Learnable embedding vector (paper r-GAT)\n","        self.conv1 = RGCNConv(feature_dim, hidden_channels, num_relations)\n","        self.conv2 = RGCNConv(hidden_channels, out_channels, num_relations)\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        #torch.nn.init.xavier_uniform_(self.node_emb)\n","        self.conv1.reset_parameters()\n","        self.conv2.reset_parameters()\n","\n","    def forward(self,x, edge_index, edge_type):\n","        #x = self.node_emb\n","        x1 = self.conv1(x, edge_index, edge_type).relu_()\n","        #x = F.dropout(x, p=0.2, training=self.training)\n","        z = self.conv2(x1, edge_index, edge_type).relu_()\n","        return z\n","\n","\n","class DistMultDecoder(torch.nn.Module):\n","    def __init__(self, num_relations, hidden_channels):\n","        super().__init__()\n","        self.rel_emb = Parameter(torch.Tensor(num_relations, hidden_channels))\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        torch.nn.init.xavier_uniform_(self.rel_emb)\n","\n","    def forward(self, z, edge_label_index):\n","        scores={}\n","        for i in range(len(edge_types)):\n","                z_src, z_dst = z[edge_label_index[i+1][0]], z[edge_label_index[i+1][1]]\n","#         out=torch.empty(0)\n","#         for i in range(len(edge_type)):\n","#             #score=torch.sum(z_src[i]*rel_emb*z_dst[i], dim=1)\n","#             out=torch.cat([out,torch.max(torch.sum(z_src[i-1]*rel_emb*z_dst[i-1], dim=1).sigmoid(),dim=0,keepdim=True).indices+1],dim=-1)\n","#         pred=out#.to(torch.int64)\n","                scores[i]=torch.sum(z_src*self.rel_emb[i]*z_dst, dim=1)\n","        return  scores\n"],"id":"63h6MHdHXNct"},{"cell_type":"code","source":["modelRGCN = GAE(\n","    RGCNEncoder(data.num_nodes, feature_dim=data['Company'].x.size(1) ,hidden_channels=64, out_channels=64,num_relations=len(edge_types)),\n","    DistMultDecoder(len(edge_types), hidden_channels=64)\n",")\n","optimizer = torch.optim.Adam(modelRGCN.parameters(), lr=0.01, weight_decay=0.2) # weight_decay=5*1e-3 optimal for 1 sector, 5e-2 for 2 sector\n","modelRGCN.loss=torch.nn.BCEWithLogitsLoss() #pos_weight = torch.ones([1])"],"metadata":{"id":"mbmjZ4smXECH","executionInfo":{"status":"ok","timestamp":1692110872564,"user_tz":-120,"elapsed":312,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"id":"mbmjZ4smXECH","execution_count":47,"outputs":[]},{"cell_type":"code","execution_count":30,"metadata":{"executionInfo":{"status":"ok","timestamp":1692106562309,"user_tz":-120,"elapsed":380,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"id":"AVoC8Zn7YPWD"},"outputs":[],"source":["#Train with mini-batchs\n","def train_batch(model,epochs):\n","    model.train()\n","    for epoch in range(epochs):\n","        total_examples = total_loss = 0\n","        #z_train=torch.empty([data.num_nodes, model.encoder.conv1.out_channels])\n","        for batch in train_loader:\n","            optimizer.zero_grad()\n","            batch = batch.to(device)\n","            batch_size = train_loader.batch_size\n","            edgetype, edge_indexes=torch.empty(1,0),torch.empty(2,0)\n","            labelled_edge_indexes={}\n","            labelled_edgetype={}\n","            #out={}\n","            i=1\n","            for key in edge_types:\n","                edge_indexes=torch.cat([edge_indexes,batch[key].edge_index],dim=-1).to(torch.int64)\n","                edgetype=torch.cat([edgetype,torch.full((1,batch[key].edge_index.size(1)),i-1)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes[i]=batch[key].edge_label_index\n","                labelled_edgetype[i]=batch[key].edge_label\n","                i+=1\n","            #edge_indexes=edge_indexes.view(-1)\n","            edgetype=edgetype.view(-1)\n","            #labelled_edgetype=labelled_edgetype.view(-1)\n","            #edge_labels=[torch.where(labelled_edgetype == i+1, 1, torch.tensor(0)).to(torch.float)  for i in  range(len(edge_types))]\n","            #labelled_edge_indexes=labelled_edge_indexes.view(-1)\n","            z = model.encode(train_data['Company'].x,edge_indexes, edge_type=edgetype)\n","            #z_train+=z*batch_size\n","\n","            out = model.decode(z, labelled_edge_indexes)\n","            #out_all=torch.stack([out[0].sigmoid(), out[1].sigmoid(),out[2].sigmoid(),out[3].sigmoid()])\n","            loss=float(0)\n","            for i in  range(len(edge_types)):\n","                loss += model.loss(out[i], labelled_edgetype[i+1])\n","            total_examples += batch_size\n","            total_loss += loss * batch_size\n","            #loss_final=total_loss/total_examples\n","            loss.backward()\n","            torch.nn.utils.clip_grad_norm_(model.parameters(), 1.)\n","            optimizer.step()\n","        print(f'Epoch: {epoch + 1},Loss: {total_loss/total_examples}')\n","        #z_trained=z_train/total_examples\n","    return  model"],"id":"AVoC8Zn7YPWD"},{"cell_type":"code","source":["trained_RGCN=train_batch(modelRGCN,10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"38RryS9_YZH9","outputId":"04c49746-c37b-452a-b14e-03a6066479ae"},"id":"38RryS9_YZH9","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 1,Loss: 283496.6875\n","Epoch: 2,Loss: 2.6269235610961914\n","Epoch: 3,Loss: 2.845172166824341\n","Epoch: 4,Loss: 2.9094951152801514\n","Epoch: 5,Loss: 3.3553428649902344\n"]}]},{"cell_type":"code","execution_count":37,"metadata":{"executionInfo":{"status":"ok","timestamp":1692108375832,"user_tz":-120,"elapsed":4,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"id":"TjVqQLtDYYFs"},"outputs":[],"source":["from sklearn.metrics import roc_auc_score, accuracy_score, precision_score,confusion_matrix,ConfusionMatrixDisplay,top_k_accuracy_score\n","#import tensorflow_ranking as tfr\n","def evaluate(data,model):\n","    model.eval()\n","    #y_true, y_pred = [], []\n","    with torch.no_grad():\n","        edgetype, edge_indexes=torch.empty(1,0),torch.empty(2,0)\n","        labelled_edge_indexes={}\n","        labelled_edgetype={}\n","            #out={}\n","        i=1\n","        for key in edge_types:\n","                edge_indexes=torch.cat([edge_indexes,data[key].edge_index],dim=-1).to(torch.int64)\n","                edgetype=torch.cat([edgetype,torch.full((1,data[key].edge_index.size(1)),i-1)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes[i]=data[key].edge_label_index\n","                labelled_edgetype[i]=data[key].edge_label\n","                i+=1\n","            #edge_indexes=edge_indexes.view(-1)\n","        edgetype=edgetype.view(-1)\n","        z = model.encode(data['Company'].x,edge_indexes, edge_type=edgetype)\n","        scores = model.decode(z, labelled_edge_indexes)\n","        #scores_all=torch.stack([scores[0].sigmoid(), scores[1].sigmoid(),scores[2].sigmoid(),scores[3].sigmoid()])\n","    for i in  range(len(edge_types)):\n","            auc = roc_auc_score(labelled_edgetype[i+1].numpy(), scores[i].sigmoid().numpy())\n","            acc = accuracy_score(labelled_edgetype[i+1].numpy(), [1 if p >= 0.5 else 0 for p in scores[i].sigmoid().numpy()])\n","            prec = precision_score(labelled_edgetype[i+1].numpy(), [1 if p >= 0.5 else 0 for p in scores[i].sigmoid().numpy()])\n","            #hit2=top_k_accuracy_score(labelled_edgetype[i+1].numpy(), scores[i].sigmoid().numpy(), k=2)\n","            #hits_at_10 = tfr.keras.metrics.HitsMetric(topn=10)\n","            #hits_at_10(labelled_edgetype[i+1].numpy(), scores[i].sigmoid().numpy()).numpy()\n","            print(f\"AUC for class {i+1}: {auc:.4f}\")\n","            print(f\"Accuracy for class {i+1}: {acc:.4f}\")\n","            #print(f\"Precision for class {i+1}: {prec:.4f}\")\n","            #print(f\"top2 for class {i+1}: {hit2:.4f}\")\n","            #print(f\"hit10 for class {i+1}: {hits_at_10:.4f}\")\n","            #mat=confusion_matrix(labelled_edgetype[i+1].numpy(), [1 if p >= 0.5 else 0 for p in scores[i].sigmoid().numpy()])\n","            #disp = ConfusionMatrixDisplay(confusion_matrix=mat,display_labels=labelled_edgetype[i+1].unique())\n","            #disp.plot()\n","    return auc\n"],"id":"TjVqQLtDYYFs"},{"cell_type":"code","source":["##VALIDATION\n","evaluate(val_data,modelRGCN)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KGb-HnuJdEpC","executionInfo":{"status":"ok","timestamp":1692110844724,"user_tz":-120,"elapsed":2033,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"4e592a78-d5b8-45a7-ebf9-e765412c422a"},"id":"KGb-HnuJdEpC","execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["AUC for class 1: 0.5000\n","Accuracy for class 1: 0.5000\n","AUC for class 2: 0.5000\n","Accuracy for class 2: 0.5000\n","AUC for class 3: 0.5000\n","Accuracy for class 3: 0.5000\n","AUC for class 4: 0.5000\n","Accuracy for class 4: 0.5000\n"]},{"output_type":"execute_result","data":{"text/plain":["0.5"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["#TEST\n","evaluate(test_data,modelRGCN)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4Klvkzcsc3qE","executionInfo":{"status":"ok","timestamp":1692110850502,"user_tz":-120,"elapsed":2067,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"14a2afcb-eb29-4699-af8a-2d013c5f6d06"},"id":"4Klvkzcsc3qE","execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["AUC for class 1: 0.5000\n","Accuracy for class 1: 0.5000\n","AUC for class 2: 0.5000\n","Accuracy for class 2: 0.5000\n","AUC for class 3: 0.5000\n","Accuracy for class 3: 0.5000\n","AUC for class 4: 0.5000\n","Accuracy for class 4: 0.5000\n"]},{"output_type":"execute_result","data":{"text/plain":["0.5"]},"metadata":{},"execution_count":46}]},{"cell_type":"code","source":["## TUNING\n","wd=[0, 1e-3]\n","hid=[[64,32],[64,64]]\n","mode=['multiplicative-self-attention','additive-self-attention']\n","mec=['within-relation','across-relation']\n","val_auc=np.empty((5,3))\n","test_auc=np.empty((5,3))\n","for h in hid:\n","    #c1=0\n","    for i in  wd:\n","            #c2=0\n","            modelRGAT = GAE(\n","                RGAT(num_nodes=data.num_nodes,hidden_channels=h[0], out_channels=h[1], num_relations=len(edge_types),dim=1,\n","                     attention_mode='additive-self-attention',attention_mechanism='within-relation',heads=1),\n","                DistMultDecoder(len(edge_types), hidden_channels=h[1])\n","                ).to(device)\n","            optimizer = torch.optim.Adam(modelRGAT.parameters(), lr=0.01, weight_decay=i)\n","            modelRGAT.loss=torch.nn.BCEWithLogitsLoss()\n","            print(f\"experiment for wd:{i} and channels:{h}\")\n","            train_batch(modelRGAT,epochs=10)\n","            evaluate(val_data,modelRGAT)\n","            evaluate(test_data,modelRGAT)\n","            #c2+=1\n","    #c2+=1\n","#print(val_auc)\n","#print(test_auc)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1691876273481,"user_tz":-120,"elapsed":7002138,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"23ee3cdd-0de8-41ce-df57-d2d500a37744","id":"5r9n8DB3dRYu"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["experiment for wd:0.001 and channels:[32, 32]\n","Epoch: 1,Loss: 2.4957761764526367\n","Epoch: 2,Loss: 2.291349411010742\n","Epoch: 3,Loss: 2.2872672080993652\n","Epoch: 4,Loss: 2.28751802444458\n","Epoch: 5,Loss: 2.289825677871704\n","Epoch: 6,Loss: 2.2886903285980225\n","Epoch: 7,Loss: 2.2867276668548584\n","AUC for class 1: 0.9159\n","accuracy for class 1: 0.8316\n","AUC for class 2: 0.8863\n","accuracy for class 2: 0.8032\n","AUC for class 3: 0.8292\n","accuracy for class 3: 0.6123\n","AUC for class 4: 0.6669\n","accuracy for class 4: 0.6735\n","AUC for class 1: 0.9159\n","accuracy for class 1: 0.8296\n","AUC for class 2: 0.8914\n","accuracy for class 2: 0.8043\n","AUC for class 3: 0.8373\n","accuracy for class 3: 0.6384\n","AUC for class 4: 0.6070\n","accuracy for class 4: 0.6165\n","experiment for wd:0.005 and channels:[32, 32]\n","Epoch: 1,Loss: 2.533484697341919\n","Epoch: 2,Loss: 2.29428768157959\n","Epoch: 3,Loss: 2.294372797012329\n","Epoch: 4,Loss: 2.2969701290130615\n","Epoch: 5,Loss: 2.2939796447753906\n","Epoch: 6,Loss: 2.2926902770996094\n","Epoch: 7,Loss: 2.2921407222747803\n","AUC for class 1: 0.9090\n","accuracy for class 1: 0.8438\n","AUC for class 2: 0.8852\n","accuracy for class 2: 0.6077\n","AUC for class 3: 0.9119\n","accuracy for class 3: 0.6215\n","AUC for class 4: 0.7451\n","accuracy for class 4: 0.6868\n","AUC for class 1: 0.9115\n","accuracy for class 1: 0.8384\n","AUC for class 2: 0.8898\n","accuracy for class 2: 0.6357\n","AUC for class 3: 0.9007\n","accuracy for class 3: 0.6297\n","AUC for class 4: 0.6779\n","accuracy for class 4: 0.6308\n","experiment for wd:0.01 and channels:[32, 32]\n","Epoch: 1,Loss: 2.5495548248291016\n","Epoch: 2,Loss: 2.3031110763549805\n","Epoch: 3,Loss: 2.300236463546753\n","Epoch: 4,Loss: 2.300349473953247\n","Epoch: 5,Loss: 2.2999911308288574\n","Epoch: 6,Loss: 2.298872947692871\n","Epoch: 7,Loss: 2.297090530395508\n","AUC for class 1: 0.9083\n","accuracy for class 1: 0.8525\n","AUC for class 2: 0.8900\n","accuracy for class 2: 0.7824\n","AUC for class 3: 0.8971\n","accuracy for class 3: 0.5849\n","AUC for class 4: 0.7485\n","accuracy for class 4: 0.7536\n","AUC for class 1: 0.9106\n","accuracy for class 1: 0.8496\n","AUC for class 2: 0.8943\n","accuracy for class 2: 0.7833\n","AUC for class 3: 0.8855\n","accuracy for class 3: 0.5927\n","AUC for class 4: 0.6868\n","accuracy for class 4: 0.7135\n","experiment for wd:0.001 and channels:[64, 32]\n","Epoch: 1,Loss: 2.4818034172058105\n","Epoch: 2,Loss: 2.290692090988159\n","Epoch: 3,Loss: 2.2890982627868652\n","Epoch: 4,Loss: 2.2871174812316895\n","Epoch: 5,Loss: 2.287584066390991\n","Epoch: 6,Loss: 2.2868571281433105\n","Epoch: 7,Loss: 2.2871170043945312\n","AUC for class 1: 0.9090\n","accuracy for class 1: 0.8547\n","AUC for class 2: 0.8782\n","accuracy for class 2: 0.6217\n","AUC for class 3: 0.8120\n","accuracy for class 3: 0.6301\n","AUC for class 4: 0.6439\n","accuracy for class 4: 0.5000\n","AUC for class 1: 0.9122\n","accuracy for class 1: 0.8483\n","AUC for class 2: 0.8866\n","accuracy for class 2: 0.6425\n","AUC for class 3: 0.8179\n","accuracy for class 3: 0.6466\n","AUC for class 4: 0.5851\n","accuracy for class 4: 0.5000\n","experiment for wd:0.005 and channels:[64, 32]\n","Epoch: 1,Loss: 2.5020036697387695\n","Epoch: 2,Loss: 2.2957286834716797\n","Epoch: 3,Loss: 2.2960634231567383\n","Epoch: 4,Loss: 2.2958061695098877\n","Epoch: 5,Loss: 2.293532371520996\n","Epoch: 6,Loss: 2.294429302215576\n","Epoch: 7,Loss: 2.2938477993011475\n","AUC for class 1: 0.9076\n","accuracy for class 1: 0.8140\n","AUC for class 2: 0.8154\n","accuracy for class 2: 0.6045\n","AUC for class 3: 0.8223\n","accuracy for class 3: 0.6055\n","AUC for class 4: 0.6795\n","accuracy for class 4: 0.6673\n","AUC for class 1: 0.9107\n","accuracy for class 1: 0.8136\n","AUC for class 2: 0.8276\n","accuracy for class 2: 0.6292\n","AUC for class 3: 0.8347\n","accuracy for class 3: 0.6313\n","AUC for class 4: 0.6277\n","accuracy for class 4: 0.6139\n","experiment for wd:0.01 and channels:[64, 32]\n","Epoch: 1,Loss: 2.54618763923645\n","Epoch: 2,Loss: 2.3046863079071045\n","Epoch: 3,Loss: 2.303210496902466\n","Epoch: 4,Loss: 2.3017189502716064\n","Epoch: 5,Loss: 2.2991371154785156\n","Epoch: 6,Loss: 2.3007681369781494\n","Epoch: 7,Loss: 2.2983176708221436\n","AUC for class 1: 0.9093\n","accuracy for class 1: 0.8488\n","AUC for class 2: 0.8877\n","accuracy for class 2: 0.8068\n","AUC for class 3: 0.9102\n","accuracy for class 3: 0.6160\n","AUC for class 4: 0.7461\n","accuracy for class 4: 0.5000\n","AUC for class 1: 0.9117\n","accuracy for class 1: 0.8435\n","AUC for class 2: 0.8923\n","accuracy for class 2: 0.8154\n","AUC for class 3: 0.9022\n","accuracy for class 3: 0.6258\n","AUC for class 4: 0.6832\n","accuracy for class 4: 0.5000\n","experiment for wd:0.001 and channels:[64, 64]\n","Epoch: 1,Loss: 2.4753410816192627\n","Epoch: 2,Loss: 2.2875850200653076\n","Epoch: 3,Loss: 2.289907217025757\n","Epoch: 4,Loss: 2.2886312007904053\n","Epoch: 5,Loss: 2.2870378494262695\n","Epoch: 6,Loss: 2.2891080379486084\n","Epoch: 7,Loss: 2.289102792739868\n","AUC for class 1: 0.9136\n","accuracy for class 1: 0.8316\n","AUC for class 2: 0.8964\n","accuracy for class 2: 0.8045\n","AUC for class 3: 0.8328\n","accuracy for class 3: 0.6137\n","AUC for class 4: 0.6045\n","accuracy for class 4: 0.6735\n","AUC for class 1: 0.9147\n","accuracy for class 1: 0.8292\n","AUC for class 2: 0.9020\n","accuracy for class 2: 0.8052\n","AUC for class 3: 0.8376\n","accuracy for class 3: 0.6361\n","AUC for class 4: 0.5565\n","accuracy for class 4: 0.6165\n","experiment for wd:0.005 and channels:[64, 64]\n","Epoch: 1,Loss: 2.5012047290802\n","Epoch: 2,Loss: 2.29569673538208\n","Epoch: 3,Loss: 2.297004461288452\n","Epoch: 4,Loss: 2.2958202362060547\n","Epoch: 5,Loss: 2.29375958442688\n","Epoch: 6,Loss: 2.29394793510437\n","Epoch: 7,Loss: 2.295144557952881\n","AUC for class 1: 0.9096\n","accuracy for class 1: 0.8557\n","AUC for class 2: 0.8787\n","accuracy for class 2: 0.8262\n","AUC for class 3: 0.8975\n","accuracy for class 3: 0.8260\n","AUC for class 4: 0.7544\n","accuracy for class 4: 0.7642\n","AUC for class 1: 0.9123\n","accuracy for class 1: 0.8519\n","AUC for class 2: 0.8866\n","accuracy for class 2: 0.8339\n","AUC for class 3: 0.8904\n","accuracy for class 3: 0.8201\n","AUC for class 4: 0.6931\n","accuracy for class 4: 0.7229\n","experiment for wd:0.01 and channels:[64, 64]\n","Epoch: 1,Loss: 2.542742967605591\n","Epoch: 2,Loss: 2.3014228343963623\n","Epoch: 3,Loss: 2.3046936988830566\n","Epoch: 4,Loss: 2.3014283180236816\n","Epoch: 5,Loss: 2.300769090652466\n","Epoch: 6,Loss: 2.2981884479522705\n","Epoch: 7,Loss: 2.298769950866699\n","AUC for class 1: 0.9098\n","accuracy for class 1: 0.8501\n","AUC for class 2: 0.8881\n","accuracy for class 2: 0.7824\n","AUC for class 3: 0.9034\n","accuracy for class 3: 0.7918\n","AUC for class 4: 0.7811\n","accuracy for class 4: 0.7740\n","AUC for class 1: 0.9117\n","accuracy for class 1: 0.8444\n","AUC for class 2: 0.8927\n","accuracy for class 2: 0.7826\n","AUC for class 3: 0.8906\n","accuracy for class 3: 0.7817\n","AUC for class 4: 0.7267\n","accuracy for class 4: 0.7344\n"]}],"id":"5r9n8DB3dRYu"},{"cell_type":"markdown","id":"33e47e6a","metadata":{"id":"33e47e6a"},"source":["## RGAT"]},{"cell_type":"code","execution_count":null,"id":"4a42fc0f","metadata":{"id":"4a42fc0f"},"outputs":[],"source":["from torch_geometric.nn import RGATConv, GAE\n","import torch.nn.functional as F\n","from torch.nn import Parameter\n","\n","class RGAT(torch.nn.Module):\n","    def __init__(self, in_channels, hidden_channels,\n","                 num_relations,dim, attention_mechanism='across-relation', attention_mode='multiplicative-self-attention'):\n","        super().__init__()\n","        self.conv1 = RGATConv(in_channels, hidden_channels, num_relations,attention_mode= attention_mode,dim=dim)\n","        self.conv2 = RGATConv(dim*hidden_channels, hidden_channels, num_relations,attention_mode=attention_mode,dim=dim )\n","        #self.lin = torch.nn.Linear(-1, out_channels)\n","\n","    def forward(self, x, edge_index, edge_type, edge_attr):\n","        #x = self.node_emb()\n","        x = self.conv1(x, edge_index, edge_type, edge_attr).relu()\n","        x = self.conv2(x, edge_index, edge_type, edge_attr)#.relu()\n","        #x = self.lin(x)\n","        return x  #F.log_softmax(x, dim=-1)\n","\n","\n","class DistMultDecoder(torch.nn.Module):\n","    def __init__(self, num_relations, hidden_channels):\n","        super().__init__()\n","        self.rel_emb = Parameter(torch.Tensor(num_relations, hidden_channels))\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        torch.nn.init.xavier_uniform_(self.rel_emb)\n","\n","    def forward(self, z, edge_label_index):\n","        z_src, z_dst = z[edge_label_index[0]], z[edge_label_index[1]]\n","#         out=torch.empty(0)\n","#         for i in range(len(edge_type)):\n","#             #score=torch.sum(z_src[i]*rel_emb*z_dst[i], dim=1)\n","#             out=torch.cat([out,torch.max(torch.sum(z_src[i-1]*rel_emb*z_dst[i-1], dim=1).sigmoid(),dim=0,keepdim=True).indices+1],dim=-1)\n","#         pred=out#.to(torch.int64)\n","        scores=[torch.sum(z_src*self.rel_emb[i]*z_dst, dim=1) for i in range(len(edge_types))]\n","        return  scores\n","\n","modelRGAT = GAE(\n","    RGAT(data['Company'].x.size(1),32, len(edge_types),dim=1),\n","    DistMultDecoder(len(edge_types), hidden_channels=32)).to(device)\n","optimizer = torch.optim.Adam(modelRGAT.parameters(), lr=0.01, weight_decay=0.03)\n","modelRGAT.loss=torch.nn.BCEWithLogitsLoss()"]},{"cell_type":"code","execution_count":null,"id":"74ab6c24","metadata":{"id":"74ab6c24"},"outputs":[],"source":["train_data['Company'].x.size(1)\n","y=modelRGAT.encode(train_data['Company'].x,edge_indexes, edge_type=edgetype,edge_attr=None)"]},{"cell_type":"code","execution_count":null,"id":"38262679","metadata":{"id":"38262679"},"outputs":[],"source":["#Train with mini-batchs\n","def train_batch(model,epochs):\n","    model.train()\n","    for epoch in range(epochs):\n","        total_examples = total_loss = 0\n","        z_train=torch.empty([data.num_nodes, 32])\n","        for batch in train_loader:\n","            optimizer.zero_grad()\n","            batch = batch.to(device)\n","            batch_size = train_loader.batch_size\n","            edgetype, edge_indexes, labelled_edge_indexes, labelled_edgetype=torch.empty(1,0),torch.empty(2,0),torch.empty(2,0),torch.empty(0)\n","            labelled_edge=torch.empty(0)\n","            i=1\n","            for key in edge_types:\n","                edge_indexes=torch.cat([edge_indexes,batch[key].edge_index],dim=-1).to(torch.int64)\n","                edgetype=torch.cat([edgetype,torch.full((1,batch[key].edge_index.size(1)),i-1)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes=torch.cat([labelled_edge_indexes,batch[key].edge_label_index],dim=-1).to(torch.int64)\n","                labelled_edgetype=torch.cat([labelled_edgetype,batch[key].edge_label*i],dim=-1)\n","                i+=1\n","            #edge_indexes=edge_indexes.view(-1)\n","            edgetype=edgetype.view(-1)\n","            #labelled_edgetype=labelled_edgetype.view(-1)\n","            edge_labels=[torch.where(labelled_edgetype == i+1, 1, torch.tensor(0)).to(torch.float)  for i in  range(len(edge_types))]\n","            #labelled_edge_indexes=labelled_edge_indexes.view(-1)\n","            z = model.encode(data['Company'].x,edge_indexes, edge_type=edgetype,edge_attr=None)\n","            z_train+=z*batch_size\n","            out = model.decode(z, labelled_edge_indexes)\n","            #out_all=torch.stack([out[0].sigmoid(), out[1].sigmoid(),out[2].sigmoid(),out[3].sigmoid()])\n","            loss=float(0)\n","            for i in  range(len(edge_types)):\n","                loss += model.loss(out[i], edge_labels[i])\n","            total_examples += batch_size\n","            total_loss += loss * batch_size\n","            #loss_final=total_loss/total_examples\n","            loss.backward()\n","            torch.nn.utils.clip_grad_norm_(model.parameters(), 1.)\n","            optimizer.step()\n","        print(f'Epoch: {epoch + 1},Loss: {total_loss/total_examples}')\n","        z_trained=z_train/total_examples\n","    return  z_trained"]},{"cell_type":"code","execution_count":null,"id":"b616bb42","metadata":{"id":"b616bb42"},"outputs":[],"source":["def train(model,data,epochs):\n","    model.train()\n","    for epoch in range(epochs):\n","        optimizer.zero_grad()\n","        edgetype, edge_indexes, labelled_edge_indexes, labelled_edgetype=torch.empty(1,0),torch.empty(2,0),torch.empty(2,0),torch.empty(0)\n","        labelled_edge=torch.empty(0)\n","        i=1\n","        for key in edge_types:\n","                edge_indexes=torch.cat([edge_indexes,data[key].edge_index],dim=-1).to(torch.int64)\n","                edgetype=torch.cat([edgetype,torch.full((1,data[key].edge_index.size(1)),i-1)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes=torch.cat([labelled_edge_indexes,data[key].edge_label_index],dim=-1).to(torch.int64)\n","                labelled_edgetype=torch.cat([labelled_edgetype,data[key].edge_label*(i)],dim=-1)\n","                i+=1\n","        edgetype=edgetype.view(-1)\n","        edge_labels=[torch.where(labelled_edgetype == i+1, 1, torch.tensor(0)).to(torch.float)  for i in  range(len(edge_types))]\n","            #labelled_edge_indexes=labelled_edge_indexes.view(-1)\n","        z = model.encode(data['Company'].x,edge_indexes, edge_type=edgetype,edge_attr=None)\n","        out = model.decode(z, labelled_edge_indexes)\n","        #out_all=torch.stack([out[0].sigmoid(), out[1].sigmoid(),out[2].sigmoid(),out[3].sigmoid()])\n","        #loss = binary_cross_entropy_with_logits(out['PARENT'], train_data['PARENT'].edge_label.float())\n","        loss=float(0)\n","        for i in  range(len(edge_types)):\n","                loss += model.loss(out[i], edge_labels[i])\n","        loss.backward()\n","        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.)\n","        optimizer.step()\n","        print(f'Epoch: {epoch + 1}, Loss: {loss.item()}')\n","    return  z_train"]},{"cell_type":"code","execution_count":null,"id":"e51ff305","metadata":{"id":"e51ff305"},"outputs":[],"source":["edgetype, edge_indexes, labelled_edge_indexes, labelled_edgetype=torch.empty(1,0),torch.empty(2,0),torch.empty(2,0),torch.empty(0)\n","labelled_edge=torch.empty(0)\n","i=1\n","for key in edge_types:\n","            edge_indexes=torch.cat([edge_indexes,train_data[key].edge_index],dim=-1).to(torch.int64)\n","            edgetype=torch.cat([edgetype,torch.full((1,train_data[key].edge_index.size(1)),i-1)],dim=-1).to(torch.int64)\n","            labelled_edge_indexes=torch.cat([labelled_edge_indexes,train_data[key].edge_label_index],dim=-1).to(torch.int64)\n","            labelled_edgetype=torch.cat([labelled_edgetype,train_data[key].edge_label*(i)],dim=-1)\n","            i+=1\n","#edge_indexes=edge_indexes.view(-1)\n","edgetype=edgetype.view(-1)\n","#labelled_edgetype=labelled_edgetype.view(-1)\n","edge_labels=[torch.where(labelled_edgetype == i+1, 1, torch.tensor(0)).to(torch.float)  for i in  range(len(edge_types))]\n","labels=torch.stack([edge_labels[0], edge_labels[1],edge_labels[2], edge_labels[3]])"]},{"cell_type":"code","execution_count":null,"id":"64333e4d","metadata":{"id":"64333e4d","outputId":"7aed855d-7a60-4ffa-e09b-edb295bfa8af"},"outputs":[{"data":{"text/plain":["tensor([   81, 18068, 26094,  ..., 35816, 38300, 37346])"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["labelled_edge_indexes={}\n","labelled_edge_indexes[1]=2\n","labelled_edge_indexes[2]=torch.tensor([3,2])\n","labelled_edge_indexes[2]=edge_indexes\n","labelled_edge_indexes[2][0]"]},{"cell_type":"code","execution_count":null,"id":"bf0bcbff","metadata":{"id":"bf0bcbff","outputId":"5ae23720-8bb1-4244-8399-6e04abe5e00a"},"outputs":[{"ename":"NameError","evalue":"name 'train' is not defined","output_type":"error","traceback":["\u001b[1;31m---------------------------------------------------------------------------\u001b[0m","\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[1;32mIn[61], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m z_train\u001b[38;5;241m=\u001b[39m\u001b[43mtrain\u001b[49m(modelRGAT,train_data,epochs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m)\n","\u001b[1;31mNameError\u001b[0m: name 'train' is not defined"]}],"source":["z_train=train(modelRGAT,train_data,epochs=10)"]},{"cell_type":"code","execution_count":null,"id":"4766ca1c","metadata":{"id":"4766ca1c","outputId":"2c99ec8b-1feb-4c4d-cda6-fe5139937ea5"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch: 1,Loss: 16922.181640625\n","Epoch: 2,Loss: 3464.009765625\n","Epoch: 3,Loss: 521.1389770507812\n","Epoch: 4,Loss: 54.52800369262695\n","Epoch: 5,Loss: 8.530824661254883\n","Epoch: 6,Loss: 2.8216392993927\n","Epoch: 7,Loss: 3.293959856033325\n","Epoch: 8,Loss: 2.7936720848083496\n","Epoch: 9,Loss: 2.7662370204925537\n","Epoch: 10,Loss: 2.7706639766693115\n"]}],"source":["z_train=train_batch(modelRGAT,epochs=10)"]},{"cell_type":"code","execution_count":null,"id":"bbaf9543","metadata":{"id":"bbaf9543"},"outputs":[],"source":["from sklearn.metrics import roc_auc_score, accuracy_score\n","\n","def evaluate_batch(loader,model,z):\n","    model.eval()\n","    #y_true, y_pred = [], []\n","    y_true, y_pred=torch.empty(4,0),torch.empty(4,0)\n","    for batch in loader:\n","        with torch.no_grad():\n","            batch = batch.to(device)\n","            edgetype, edge_indexes, labelled_edge_indexes, labelled_edgetype=torch.empty(1,0),torch.empty(2,0),torch.empty(2,0),torch.empty(0)\n","            #labelled_edge=torch.empty(0)\n","            i=1\n","            for key in edge_types:\n","                edge_indexes=torch.cat([edge_indexes,batch[key].edge_index],dim=-1).to(torch.int64)\n","                edgetype=torch.cat([edgetype,torch.full((1,batch[key].edge_index.size(1)),i)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes=torch.cat([labelled_edge_indexes,batch[key].edge_label_index],dim=-1).to(torch.int64)\n","                labelled_edgetype=torch.cat([labelled_edgetype,batch[key].edge_label*(i)],dim=-1)\n","                i+=1\n","            #edge_indexes=edge_indexes.view(-1)\n","            edgetype=edgetype.view(-1)\n","            #labelled_edgetype=labelled_edgetype.view(-1)\n","            edge_labels=[torch.where(labelled_edgetype == i+1, 1, torch.tensor(0)).to(torch.float)  for i in  range(len(edge_types))]\n","            labels=torch.stack([edge_labels[0], edge_labels[1],edge_labels[2], edge_labels[3]])\n","            #z = model.encode(train_data['Company'].x,edge_indexes, edge_type=edgetype,edge_attr=None)\n","            scores = model.decode(z, labelled_edge_indexes)\n","            scores_all=torch.stack([scores[0].sigmoid(), scores[1].sigmoid(),scores[2].sigmoid(),scores[3].sigmoid()])\n","            #scores_max=torch.max(scores_all, dim=0)\n","            #pred=torch.argmax(scores_all, dim=0)+1\n","            y_pred=torch.cat([y_pred,scores_all],dim=1)\n","            y_true =torch.cat([y_true,labels],dim=1)\n","    for i in  range(len(edge_types)):\n","            auc = roc_auc_score(y_true[i].numpy(), y_pred[i].numpy())\n","            acc = accuracy_score(y_true[i].numpy(), [1 if p >= 0.5 else 0 for p in y_pred[i].numpy()])\n","            prec = precision_score(y_true[i].numpy(), [1 if p >= 0.5 else 0 for p in y_pred[i].numpy()])\n","            print(f\"Validation AUC for class {i+1}: {auc:.4f}\")\n","            print(f\"Validation accuracy for class {i+1}: {acc:.4f}\")\n","            print(f\"Validation precision for class {i+1}: {prec:.4f}\")\n","    return auc, acc\n","\n"]},{"cell_type":"code","execution_count":null,"id":"ae30e1a9","metadata":{"id":"ae30e1a9"},"outputs":[],"source":["from sklearn.metrics import roc_auc_score, accuracy_score, precision_score,confusion_matrix,ConfusionMatrixDisplay\n","\n","def evaluate(data,model):\n","    model.eval()\n","    #y_true, y_pred = [], []\n","    with torch.no_grad():\n","        edgetype, edge_indexes, labelled_edge_indexes, labelled_edgetype=torch.empty(1,0),torch.empty(2,0),torch.empty(2,0),torch.empty(0)\n","        #labelled_edge=torch.empty(0)\n","        i=1\n","        for key in edge_types:\n","                edge_indexes=torch.cat([edge_indexes,data[key].edge_index],dim=-1).to(torch.int64)\n","                edgetype=torch.cat([edgetype,torch.full((1,data[key].edge_index.size(1)),i-1)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes=torch.cat([labelled_edge_indexes,data[key].edge_label_index],dim=-1).to(torch.int64)\n","                labelled_edgetype=torch.cat([labelled_edgetype,data[key].edge_label*(i)],dim=-1)\n","                i+=1\n","        #edge_indexes=edge_indexes.view(-1)\n","        edgetype=edgetype.view(-1)\n","        #labelled_edgetype=labelled_edgetype.view(-1)\n","        edge_labels=[torch.where(labelled_edgetype == i+1, 1, torch.tensor(0)).to(torch.float)  for i in  range(len(edge_types))]\n","        labels=torch.stack([edge_labels[0], edge_labels[1],edge_labels[2], edge_labels[3]])\n","        z = model.encode(data['Company'].x,edge_indexes, edge_type=edgetype,edge_attr=None)\n","        scores = model.decode(z, labelled_edge_indexes)\n","        scores_all=torch.stack([scores[0].sigmoid(), scores[1].sigmoid(),scores[2].sigmoid(),scores[3].sigmoid()])\n","    for i in  range(len(edge_types)):\n","            auc = roc_auc_score(labels[i].numpy(), scores_all[i].numpy())\n","            acc = accuracy_score(labels[i].numpy(), [1 if p >= 0.5 else 0 for p in scores_all[i].numpy()])\n","            prec = precision_score(labels[i].numpy(), [1 if p >= 0.5 else 0 for p in scores_all[i].numpy()])\n","            print(f\"Validation AUC for class {i+1}: {auc:.4f}\")\n","            print(f\"Validation accuracy for class {i+1}: {acc:.4f}\")\n","            print(f\"Validation precision for class {i+1}: {prec:.4f}\")\n","            mat=confusion_matrix(labels[i].numpy(), [1 if p >= 0.5 else 0 for p in scores_all[i].numpy()])\n","            disp = ConfusionMatrixDisplay(confusion_matrix=mat,display_labels=labels.unique())\n","            disp.plot()\n","    return auc, acc\n","\n"]},{"cell_type":"code","execution_count":null,"id":"e34815d2","metadata":{"id":"e34815d2"},"outputs":[],"source":["scores = modelRGAT.decode(z_train, labelled_edge_indexes)\n","scores_all=torch.stack([scores[0].sigmoid(), scores[1].sigmoid(),scores[2].sigmoid(),scores[3].sigmoid()])"]},{"cell_type":"code","execution_count":null,"id":"18fcd696","metadata":{"id":"18fcd696","outputId":"90d9c066-1105-4b07-83d0-2725eb4e8857"},"outputs":[{"data":{"text/plain":["tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0010, 0.0010,\n","        0.0010, 0.0010, 0.0010, 0.0010, 0.0010, 0.0010, 0.0010, 0.0010, 0.0010,\n","        0.0010, 0.0010, 0.0010, 0.0010, 0.0010, 0.0010, 0.0010, 0.0010, 0.0010,\n","        0.0010, 0.0010, 1.0000])"]},"execution_count":130,"metadata":{},"output_type":"execute_result"}],"source":["np.around(scores_all[0].detach().unique(),decimals=3)\n","labels[0]"]},{"cell_type":"code","execution_count":null,"id":"a6016b33","metadata":{"id":"a6016b33","outputId":"f76f295f-6a25-470d-e8d7-2c480b31119d"},"outputs":[{"ename":"NameError","evalue":"name 'test_loader' is not defined","output_type":"error","traceback":["\u001b[1;31m---------------------------------------------------------------------------\u001b[0m","\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[1;32mIn[203], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m evaluate_batch(\u001b[43mtest_loader\u001b[49m,modelRGAT, z_train)\n","\u001b[1;31mNameError\u001b[0m: name 'test_loader' is not defined"]}],"source":["evaluate_batch(test_loader,modelRGAT, z_train)"]},{"cell_type":"code","execution_count":null,"id":"558d6d34","metadata":{"id":"558d6d34","outputId":"3330b108-152b-4b7b-84dc-62fc474c7632"},"outputs":[{"name":"stdout","output_type":"stream","text":["Validation AUC for class 1: 0.4381\n","Validation accuracy for class 1: 0.8584\n","Validation precision for class 1: 0.0707\n"]},{"name":"stderr","output_type":"stream","text":["C:\\Users\\jack\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","C:\\Users\\jack\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"name":"stdout","output_type":"stream","text":["Validation AUC for class 2: 0.5091\n","Validation accuracy for class 2: 0.8488\n","Validation precision for class 2: 0.0000\n","Validation AUC for class 3: 0.0970\n","Validation accuracy for class 3: 0.8691\n","Validation precision for class 3: 0.0000\n","Validation AUC for class 4: 0.5211\n","Validation accuracy for class 4: 0.8584\n","Validation precision for class 4: 0.0000\n"]},{"name":"stderr","output_type":"stream","text":["C:\\Users\\jack\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"data":{"text/plain":["(0.5211440511397362, 0.858392999204455)"]},"execution_count":16,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["evaluate(test_data,modelRGAT)"]},{"cell_type":"markdown","id":"860cc554","metadata":{"id":"860cc554"},"source":["## GCN"]},{"cell_type":"code","execution_count":null,"id":"94bf03bc","metadata":{"id":"94bf03bc"},"outputs":[],"source":["import torch\n","import torch.nn.functional as F\n","from torch_geometric.nn import GCNConv\n","from torch_geometric.nn import global_mean_pool\n","\n","class GCN(torch.nn.Module):\n","    def __init__(self, hidden_channels, out_channels):\n","        super().__init__()\n","        self.conv1 = GCNConv(train_data.num_features['Company'], hidden_channels)\n","        self.conv2 = GCNConv(hidden_channels, out_channels)\n","        self.loss = torch.nn.BCEWithLogitsLoss()\n","    def forward(self, x_dict, edge_index_dict,edge_label_index):\n","        #x = torch.cat([x_dict[key] for key in x_dict.keys()], dim=0)\n","        edge_index = torch.cat([edge_index_dict[key] for key in edge_index_dict.keys()], dim=1)\n","        x = self.conv1(x_dict['Company'], edge_index).relu()\n","        #print(x)\n","        x = self.conv2(x, edge_index)\n","        #xpool = global_mean_pool(x, torch.zeros(x_dict['Company'].size(0), dtype=torch.long))\n","        #return x\n","        #out_dict = {}\n","        row, col = edge_label_index\n","        #out = torch.cat([x[row], x[col]], dim=-1)\n","        out = torch.sum(x[row]* x[col], dim=-1)\n","\n","        return out\n","model = GCN(hidden_channels=32, out_channels=1)\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n"]},{"cell_type":"code","execution_count":null,"id":"2787841d","metadata":{"id":"2787841d"},"outputs":[],"source":["#Train with mini-batchs\n","def train_batch(model):\n","    model.train()\n","    total_examples = total_loss = 0\n","    for batch in train_loader:\n","        optimizer.zero_grad()\n","        batch = batch.to(device)\n","        batch_size = train_loader.batch_size\n","        out = model(batch.x_dict, batch.edge_index_dict, batch['SUPPLIES'].edge_label_index)\n","        target = batch['SUPPLIES'].edge_label\n","        loss = model.loss(out, target)\n","        loss.backward()\n","        optimizer.step()\n","\n","        total_examples += batch_size\n","        total_loss += float(loss) * batch_size\n","    print(f'Loss: {total_loss/total_examples}')\n","    return model"]},{"cell_type":"code","execution_count":null,"id":"0d75f174","metadata":{"id":"0d75f174"},"outputs":[],"source":["v.size()"]},{"cell_type":"code","execution_count":null,"id":"e089f36d","metadata":{"id":"e089f36d"},"outputs":[],"source":["row, col = train_data['SUPPLIES'].edge_label_index\n","# z = torch.cat([z_dict['Company'][row], z_dict['Company'][col]], dim=-1)\n","#z = (train_data.x_dict['Company'][row] * train_data.x_dict['Company'][col]).sum(dim=-1)\n","torch.cat([train_data.x_dict['Company'][row] , train_data.x_dict['Company'][col]], dim=-1).size()"]},{"cell_type":"code","execution_count":null,"id":"d7d46c1d","metadata":{"id":"d7d46c1d"},"outputs":[],"source":["train_batch(model)"]},{"cell_type":"code","execution_count":null,"id":"00f08feb","metadata":{"id":"00f08feb"},"outputs":[],"source":["from sklearn.metrics import roc_auc_score, accuracy_score\n","\n","def evaluate(loader,model):\n","    model.eval()\n","    #y_true, y_pred = [], []\n","    y_true, y_pred=torch.empty(0),torch.empty(0)\n","    for batch in loader:\n","        with torch.no_grad():\n","            batch = batch.to(device)\n","            pred = model(batch.x_dict, batch.edge_index_dict, batch['SUPPLIES'].edge_label_index).sigmoid()\n","            #y_true += batch['SUPPLIES'].edge_label.tolist()\n","            #y_pred += torch.sigmoid(pred).tolist()\n","            y_true=torch.cat([y_true,batch['SUPPLIES'].edge_label],dim=0)\n","            y_pred=torch.cat([y_pred,pred],dim=0)\n","    auc = roc_auc_score(y_true.numpy(), y_pred.numpy())\n","    acc = accuracy_score(y_true.numpy(), [1 if p >= 0.5 else 0 for p in y_pred.numpy()])\n","    return auc, acc\n","\n","\n"]},{"cell_type":"code","execution_count":null,"id":"f174fc93","metadata":{"id":"f174fc93"},"outputs":[],"source":["# Evaluate on validation set\n","val_auc, val_acc = evaluate(test_loader,model)\n","print(f\"Validation AUC: {val_auc:.4f}\")\n","print(f\"Validation accuracy: {val_acc:.4f}\")"]},{"cell_type":"markdown","id":"686af875","metadata":{"id":"686af875"},"source":["## RGCN-SINGLE EDGETYPE"]},{"cell_type":"code","execution_count":60,"id":"53966227","metadata":{"id":"53966227","executionInfo":{"status":"ok","timestamp":1691975013251,"user_tz":-120,"elapsed":235,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"outputs":[],"source":["from torch_geometric.nn import GAE, RGCNConv\n","from torch.nn import Parameter\n","class RGCNEncoder(torch.nn.Module):\n","    def __init__(self, num_nodes, hidden_channels,out_channels, num_relations):\n","        super().__init__()\n","        self.node_emb = Parameter(torch.Tensor(num_nodes, hidden_channels)) ##Initiliaze Learnable embedding vector (paper r-GAT)\n","        self.conv1 = RGCNConv(hidden_channels, hidden_channels, num_relations)\n","        self.conv2 = RGCNConv(hidden_channels, out_channels, num_relations)\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        torch.nn.init.xavier_uniform_(self.node_emb)\n","        self.conv1.reset_parameters()\n","        self.conv2.reset_parameters()\n","\n","    def forward(self, edge_index, edge_type):\n","        x = self.node_emb\n","        x = self.conv1(x, edge_index, edge_type).relu_()\n","        #x = F.dropout(x, p=0.2, training=self.training)\n","        x = self.conv2(x, edge_index, edge_type).relu_()\n","        return x\n","\n","\n","class DistMultDecoder(torch.nn.Module):\n","    def __init__(self, num_relations, hidden_channels):\n","        super().__init__()\n","        self.rel_emb = Parameter(torch.Tensor(num_relations, hidden_channels))\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        torch.nn.init.xavier_uniform_(self.rel_emb)\n","\n","    def forward(self, z, edge_label_index, edge_type):\n","        z_src, z_dst = z[edge_label_index[0]], z[edge_label_index[1]]\n","        rel = self.rel_emb[edge_type-1]\n","        return torch.sum(z_src * rel * z_dst, dim=1)\n","\n"]},{"cell_type":"code","source":["## DENEME\n","from torch_geometric.nn import GAE, RGCNConv\n","from torch.nn import Parameter\n","class RGCNEncoder(torch.nn.Module):\n","    def __init__(self, num_nodes, hidden_channels,out_channels, num_relations):\n","        super().__init__()\n","        self.node_emb = Parameter(torch.Tensor(num_nodes, hidden_channels)) ##Initiliaze Learnable embedding vector (paper r-GAT)\n","        self.conv1 = RGCNConv(hidden_channels, hidden_channels, num_relations)\n","        self.conv2 = RGCNConv(hidden_channels, out_channels, num_relations)\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        torch.nn.init.xavier_uniform_(self.node_emb)\n","        self.conv1.reset_parameters()\n","        self.conv2.reset_parameters()\n","\n","    def forward(self, edge_index, edge_type):\n","        x = self.node_emb\n","        x = self.conv1(x, edge_index, edge_type).relu_()\n","        #x = F.dropout(x, p=0.2, training=self.training)\n","        x = self.conv2(x, edge_index, edge_type).relu_()\n","        return x\n","\n","\n","class DistMultDecoder(torch.nn.Module):\n","    def __init__(self, num_relations, hidden_channels):\n","        super().__init__()\n","        self.rel_emb = Parameter(torch.Tensor(1, hidden_channels))\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        torch.nn.init.xavier_uniform_(self.rel_emb)\n","\n","    def forward(self, z, edge_label_index):\n","        z_src, z_dst = z[edge_label_index[0]], z[edge_label_index[1]]\n","        rel = self.rel_emb\n","        return torch.sum(z_src * rel * z_dst, dim=1)"],"metadata":{"id":"vzFIQLIJjieG","executionInfo":{"status":"ok","timestamp":1691975090001,"user_tz":-120,"elapsed":11,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"id":"vzFIQLIJjieG","execution_count":69,"outputs":[]},{"cell_type":"code","source":["modelRGCN_STES = GAE(\n","    RGCNEncoder(data.num_nodes, hidden_channels=64,out_channels=32, num_relations=len(edge_types)),\n","    DistMultDecoder(len(edge_types), hidden_channels=32),\n",")\n","optimizer = torch.optim.Adam(modelRGCN_STES.parameters(), lr=0.01, weight_decay=0)\n","modelRGCN_STES.loss=torch.nn.BCEWithLogitsLoss()"],"metadata":{"id":"L5-vNJEPz27B","executionInfo":{"status":"ok","timestamp":1691975152053,"user_tz":-120,"elapsed":226,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"id":"L5-vNJEPz27B","execution_count":78,"outputs":[]},{"cell_type":"code","execution_count":62,"id":"e71496eb","metadata":{"id":"e71496eb","executionInfo":{"status":"ok","timestamp":1691975022756,"user_tz":-120,"elapsed":229,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"outputs":[],"source":["#Train with mini-batchs\n","def train_batch(model,epochs):\n","    model.train()\n","    for epoch in range(epochs):\n","      total_examples = total_loss = 0\n","      for batch in train_loader:\n","        optimizer.zero_grad()\n","        batch = batch.to(device)\n","        batch_size = train_loader.batch_size\n","        edgetype, edge_indexes, labelled_edge_indexes, labelled_edgetype=torch.empty(1,0),torch.empty(2,0),torch.empty(2,0),torch.empty(1,0)\n","        labelled_edge=torch.empty(0)\n","        i=1\n","        for key in edge_types:\n","            edge_indexes=torch.cat([edge_indexes,batch[key].edge_index],dim=-1).to(torch.int64)\n","            edgetype=torch.cat([edgetype,torch.full((1,batch[key].edge_index.size(1)),i)],dim=-1).to(torch.int64)\n","            labelled_edge_indexes=torch.cat([labelled_edge_indexes,batch[key].edge_label_index],dim=-1).to(torch.int64)\n","            labelled_edgetype=torch.cat([labelled_edgetype,torch.full((1,batch[key].edge_label_index.size(1)),i)],dim=-1).to(torch.int64)\n","            labelled_edge=torch.cat([labelled_edge,batch[key].edge_label],dim=-1)\n","            i+=1\n","        #edge_indexes=edge_indexes.view(-1)\n","        edgetype=edgetype.view(-1)\n","        labelled_edgetype=labelled_edgetype.view(-1)\n","        #labelled_edge_indexes=labelled_edge_indexes.view(-1)\n","        z = model.encode(edge_indexes, edge_type=edgetype)\n","        out = model.decode(z, labelled_edge_indexes,labelled_edgetype)\n","        target =labelled_edge\n","        loss = model.loss(out, target)\n","        total_examples += batch_size\n","        total_loss += float(loss) * batch_size\n","\n","        loss.backward()\n","        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.)\n","        optimizer.step()\n","      print(f'Epoch: {epoch + 1},Loss: {total_loss/total_examples}')\n","    return model"]},{"cell_type":"code","source":["#DENEME\n","def train_batch(model,epochs):\n","    model.train()\n","    for epoch in range(epochs):\n","      total_examples = total_loss = 0\n","      for batch in train_loader:\n","        optimizer.zero_grad()\n","        batch = batch.to(device)\n","        batch_size = train_loader.batch_size\n","        edgetype, edge_indexes, labelled_edge_indexes, labelled_edgetype=torch.empty(1,0),torch.empty(2,0),torch.empty(2,0),torch.empty(1,0)\n","        labelled_edge=torch.empty(0)\n","        i=1\n","        for key in edge_types:\n","            edge_indexes=torch.cat([edge_indexes,batch[key].edge_index],dim=-1).to(torch.int64)\n","            edgetype=torch.cat([edgetype,torch.full((1,batch[key].edge_index.size(1)),i)],dim=-1).to(torch.int64)\n","            labelled_edge_indexes=torch.cat([labelled_edge_indexes,batch[key].edge_label_index],dim=-1).to(torch.int64)\n","            #labelled_edgetype=torch.cat([labelled_edgetype,torch.full((1,batch[key].edge_label_index.size(1)),i)],dim=-1).to(torch.int64)\n","            labelled_edge=torch.cat([labelled_edge,batch[key].edge_label],dim=-1)\n","            i+=1\n","        #edge_indexes=edge_indexes.view(-1)\n","        edgetype=edgetype.view(-1)\n","        #labelled_edgetype=labelled_edgetype.view(-1)\n","        #labelled_edge_indexes=labelled_edge_indexes.view(-1)\n","        z = model.encode(edge_indexes, edge_type=edgetype)\n","        out = model.decode(z, labelled_edge_indexes)\n","        target =labelled_edge\n","        loss = model.loss(out, target)\n","        total_examples += batch_size\n","        total_loss += float(loss) * batch_size\n","\n","        loss.backward()\n","        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.)\n","        optimizer.step()\n","      print(f'Epoch: {epoch + 1},Loss: {total_loss/total_examples}')\n","    return model"],"metadata":{"id":"YVg6orA0j4DT","executionInfo":{"status":"ok","timestamp":1691975154779,"user_tz":-120,"elapsed":310,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"id":"YVg6orA0j4DT","execution_count":79,"outputs":[]},{"cell_type":"code","execution_count":80,"id":"0f3dc0ab","metadata":{"id":"0f3dc0ab","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1691975268398,"user_tz":-120,"elapsed":112445,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"1b3473d5-9f6d-4d94-d93c-c313b996d387"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 1,Loss: 0.25011917776255693\n","Epoch: 2,Loss: 0.018756917884780303\n","Epoch: 3,Loss: 0.00978658567355187\n","Epoch: 4,Loss: 0.007196336898400828\n","Epoch: 5,Loss: 0.005459423047593898\n","Epoch: 6,Loss: 0.004565951983547873\n","Epoch: 7,Loss: 0.004348950382942955\n","Epoch: 8,Loss: 0.004101486281595296\n","Epoch: 9,Loss: 0.0038120451607499962\n","Epoch: 10,Loss: 0.0035190735081279717\n"]}],"source":["modelRGCN_STES_trained=train_batch(modelRGCN_STES,epochs=10)"]},{"cell_type":"code","execution_count":22,"id":"890d0ca1","metadata":{"id":"890d0ca1","executionInfo":{"status":"ok","timestamp":1691947363252,"user_tz":-120,"elapsed":325,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"outputs":[],"source":["from sklearn.metrics import roc_auc_score, accuracy_score,precision_score,confusion_matrix,ConfusionMatrixDisplay,top_k_accuracy_score\n","\n","def evaluate(data,model):\n","    model.eval()\n","    #y_true, y_pred = [], []\n","    #y_true, y_pred=torch.empty(0),torch.empty(0)\n","    with torch.no_grad():\n","            edgetype, edge_indexes, labelled_edge_indexes, labelled_edgetype=torch.empty(1,0),torch.empty(2,0),torch.empty(2,0),torch.empty(1,0)\n","            labelled_edge=torch.empty(0)\n","            i=1\n","            for key in edge_types:\n","                edge_indexes=torch.cat([edge_indexes,data[key].edge_index],dim=-1).to(torch.int64)\n","                edgetype=torch.cat([edgetype,torch.full((1,data[key].edge_index.size(1)),i)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes=torch.cat([labelled_edge_indexes,data[key].edge_label_index],dim=-1).to(torch.int64)\n","                labelled_edgetype=torch.cat([labelled_edgetype,torch.full((1,data[key].edge_label_index.size(1)),i)],dim=-1).to(torch.int64)\n","                labelled_edge=torch.cat([labelled_edge,data[key].edge_label],dim=-1)\n","                i+=1\n","            #edge_indexes=edge_indexes.view(-1)\n","            edgetype=edgetype.view(-1)\n","            labelled_edgetype=labelled_edgetype.view(-1)\n","            z = model.encode(edge_indexes, edge_type=edgetype)\n","            scores = model.decode(z, labelled_edge_indexes,labelled_edgetype)\n","            #y_true =torch.cat([y_true,labelled_edge],dim=0)\n","\n","            #y_pred=torch.cat([y_pred,pred],dim=0)\n","    auc = roc_auc_score(labelled_edge.numpy(), scores.sigmoid().numpy())\n","    acc = accuracy_score(labelled_edge.numpy(), [1 if p >= 0.5 else 0 for p in scores.sigmoid().numpy()])\n","    print(f\"AUC : {auc:.4f}\")\n","    print(f\"Accuracy : {acc:.4f}\")\n","    return auc, acc\n","\n","\n"]},{"cell_type":"code","source":["## dENEME\n","from sklearn.metrics import roc_auc_score, accuracy_score,precision_score,confusion_matrix,ConfusionMatrixDisplay,top_k_accuracy_score\n","\n","def evaluate(data,model):\n","    model.eval()\n","    #y_true, y_pred = [], []\n","    #y_true, y_pred=torch.empty(0),torch.empty(0)\n","    with torch.no_grad():\n","            edgetype, edge_indexes, labelled_edge_indexes, labelled_edgetype=torch.empty(1,0),torch.empty(2,0),torch.empty(2,0),torch.empty(1,0)\n","            labelled_edge=torch.empty(0)\n","            i=1\n","            for key in edge_types:\n","                edge_indexes=torch.cat([edge_indexes,data[key].edge_index],dim=-1).to(torch.int64)\n","                edgetype=torch.cat([edgetype,torch.full((1,data[key].edge_index.size(1)),i)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes=torch.cat([labelled_edge_indexes,data[key].edge_label_index],dim=-1).to(torch.int64)\n","                #labelled_edgetype=torch.cat([labelled_edgetype,torch.full((1,data[key].edge_label_index.size(1)),i)],dim=-1).to(torch.int64)\n","                labelled_edge=torch.cat([labelled_edge,data[key].edge_label],dim=-1)\n","                i+=1\n","            #edge_indexes=edge_indexes.view(-1)\n","            edgetype=edgetype.view(-1)\n","            #labelled_edgetype=labelled_edgetype.view(-1)\n","            z = model.encode(edge_indexes, edge_type=edgetype)\n","            scores = model.decode(z, labelled_edge_indexes)\n","            #y_true =torch.cat([y_true,labelled_edge],dim=0)\n","\n","            #y_pred=torch.cat([y_pred,pred],dim=0)\n","    auc = roc_auc_score(labelled_edge.numpy(), scores.sigmoid().numpy())\n","    acc = accuracy_score(labelled_edge.numpy(), [1 if p >= 0.5 else 0 for p in scores.sigmoid().numpy()])\n","    print(f\"AUC : {auc:.4f}\")\n","    print(f\"Accuracy : {acc:.4f}\")\n","    return auc, acc"],"metadata":{"id":"AVyW4MPklJcD","executionInfo":{"status":"ok","timestamp":1691975274526,"user_tz":-120,"elapsed":249,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}}},"id":"AVyW4MPklJcD","execution_count":81,"outputs":[]},{"cell_type":"code","execution_count":82,"id":"eca73cc1","metadata":{"id":"eca73cc1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1691975277648,"user_tz":-120,"elapsed":238,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"30e6d12c-8ca6-4f57-f7b3-4860e764ff99"},"outputs":[{"output_type":"stream","name":"stdout","text":["AUC : 0.8685\n","Accuracy : 0.8043\n"]},{"output_type":"execute_result","data":{"text/plain":["(0.8685474686007112, 0.8042820069204152)"]},"metadata":{},"execution_count":82}],"source":["# Evaluate on validation set\n","evaluate(val_data,modelRGCN_STES)"]},{"cell_type":"code","execution_count":83,"id":"26ed748a","metadata":{"id":"26ed748a","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1691975281816,"user_tz":-120,"elapsed":225,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"150161f6-85c7-4296-90b6-e40754aea1d0"},"outputs":[{"output_type":"stream","name":"stdout","text":["AUC : 0.8606\n","Accuracy : 0.7949\n"]},{"output_type":"execute_result","data":{"text/plain":["(0.8605780803506209, 0.794918918918919)"]},"metadata":{},"execution_count":83}],"source":["# Evaluate on test set\n","evaluate(test_data,modelRGCN_STES)"]},{"cell_type":"code","source":["## TUNING\n","wd=[0, 1e-3, 5e-3,1e-2]\n","hid=[[32,32],[64,32],[64,64]]\n","val_auc=np.empty((4,3))\n","test_auc=np.empty((4,3))\n","val_acc=np.empty((4,3))\n","test_acc=np.empty((4,3))\n","c1=0\n","for i in  wd:\n","    c2=0\n","    for h in hid:\n","\n","            modelRGCN_STES = GAE(\n","              RGCNEncoder(data.num_nodes, hidden_channels=h[0], out_channels=h[1],num_relations=len(edge_types)),\n","               DistMultDecoder(len(edge_types), hidden_channels=h[1])\n","            )\n","            optimizer = torch.optim.Adam(modelRGCN_STES.parameters(), lr=0.01, weight_decay=0)\n","            modelRGCN_STES.loss=torch.nn.BCEWithLogitsLoss()\n","\n","            print(f\"experiment for wd: {i} and channels: {h}\")\n","            train_batch(modelRGCN_STES,epochs=10)\n","            val_auc[c1,c2],val_acc[c1,c2]=evaluate(val_data,modelRGCN_STES)\n","            test_auc[c1,c2],test_acc[c1,c2]=evaluate(test_data,modelRGCN_STES)\n","            c2+=1\n","    c1+=1\n","print(val_auc)\n","print(test_auc)\n",""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zI09FwszBNQa","executionInfo":{"status":"ok","timestamp":1691971348490,"user_tz":-120,"elapsed":6032638,"user":{"displayName":"BARIS AKSOY","userId":"12579392646234620311"}},"outputId":"d517b00f-cfa8-41e7-a899-33f19aec783b"},"id":"zI09FwszBNQa","execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["experiment for wd: 0 and channels: [32, 32]\n","Epoch: 1,Loss: 0.13979590341556244\n","Epoch: 2,Loss: 0.002673806853664036\n","Epoch: 3,Loss: 0.002207554183685436\n","Epoch: 4,Loss: 0.0020480747979420883\n","Epoch: 5,Loss: 0.0019099510131547085\n","Epoch: 6,Loss: 0.001743401856555675\n","Epoch: 7,Loss: 0.0016809599487504993\n","Epoch: 8,Loss: 0.0015587916946969925\n","Epoch: 9,Loss: 0.0016038089650324903\n","Epoch: 10,Loss: 0.0015607287937130492\n","AUC : 0.8708\n","Accuracy : 0.8248\n","AUC : 0.8747\n","Accuracy : 0.8272\n","experiment for wd: 0 and channels: [64, 32]\n","Epoch: 1,Loss: 0.10587430683036263\n","Epoch: 2,Loss: 0.0025013629803792214\n","Epoch: 3,Loss: 0.002033969495767871\n","Epoch: 4,Loss: 0.0019482683336648804\n","Epoch: 5,Loss: 0.001803974677862313\n","Epoch: 6,Loss: 0.001764987656273521\n","Epoch: 7,Loss: 0.0016372122201853646\n","Epoch: 8,Loss: 0.001511135881838317\n","Epoch: 9,Loss: 0.0014734542454019762\n","Epoch: 10,Loss: 0.0013463206275796087\n","AUC : 0.8404\n","Accuracy : 0.8104\n","AUC : 0.8452\n","Accuracy : 0.8125\n","experiment for wd: 0 and channels: [64, 64]\n","Epoch: 1,Loss: 0.10364222400821746\n","Epoch: 2,Loss: 0.002550959506501945\n","Epoch: 3,Loss: 0.002111227520240041\n","Epoch: 4,Loss: 0.0019210868344928782\n","Epoch: 5,Loss: 0.001732580354795433\n","Epoch: 6,Loss: 0.001719222765845748\n","Epoch: 7,Loss: 0.0016072542845414809\n","Epoch: 8,Loss: 0.0015911777593338719\n","Epoch: 9,Loss: 0.0016463837698281099\n","Epoch: 10,Loss: 0.0015226627341829813\n","AUC : 0.8500\n","Accuracy : 0.8074\n","AUC : 0.8508\n","Accuracy : 0.8094\n","experiment for wd: 0.001 and channels: [32, 32]\n","Epoch: 1,Loss: 0.14582976264377626\n","Epoch: 2,Loss: 0.002751230255055886\n","Epoch: 3,Loss: 0.002238659509636748\n","Epoch: 4,Loss: 0.002089819336274209\n","Epoch: 5,Loss: 0.0019161665633034247\n","Epoch: 6,Loss: 0.0018528217843805368\n","Epoch: 7,Loss: 0.0017904144550602023\n","Epoch: 8,Loss: 0.001659883525616561\n","Epoch: 9,Loss: 0.001607030793093145\n","Epoch: 10,Loss: 0.0014994353145504227\n","AUC : 0.8702\n","Accuracy : 0.8266\n","AUC : 0.8715\n","Accuracy : 0.8252\n","experiment for wd: 0.001 and channels: [64, 32]\n","Epoch: 1,Loss: 0.1010264951753645\n","Epoch: 2,Loss: 0.002511094266978594\n","Epoch: 3,Loss: 0.002029653612631731\n","Epoch: 4,Loss: 0.0018942775992819897\n","Epoch: 5,Loss: 0.0017729715068036547\n","Epoch: 6,Loss: 0.0017533320270908567\n","Epoch: 7,Loss: 0.0016186499860710822\n","Epoch: 8,Loss: 0.0015383954983777726\n","Epoch: 9,Loss: 0.0015335620873464415\n","Epoch: 10,Loss: 0.0014160518274785806\n","AUC : 0.8520\n","Accuracy : 0.8195\n","AUC : 0.8519\n","Accuracy : 0.8179\n","experiment for wd: 0.001 and channels: [64, 64]\n","Epoch: 1,Loss: 0.10574212941484383\n","Epoch: 2,Loss: 0.0026643134590883097\n","Epoch: 3,Loss: 0.0019970780910136036\n","Epoch: 4,Loss: 0.001783328433521092\n","Epoch: 5,Loss: 0.0016685024745619068\n","Epoch: 6,Loss: 0.001643241080455482\n","Epoch: 7,Loss: 0.0016743812916012338\n","Epoch: 8,Loss: 0.0014837316765736503\n","Epoch: 9,Loss: 0.0014672827548705615\n","Epoch: 10,Loss: 0.0014518062673652401\n","AUC : 0.8831\n","Accuracy : 0.8396\n","AUC : 0.8847\n","Accuracy : 0.8406\n","experiment for wd: 0.005 and channels: [32, 32]\n","Epoch: 1,Loss: 0.13895520934512695\n","Epoch: 2,Loss: 0.0025179719632992953\n","Epoch: 3,Loss: 0.002222184354188637\n","Epoch: 4,Loss: 0.002069726398286338\n","Epoch: 5,Loss: 0.001952305542699133\n","Epoch: 6,Loss: 0.0017324202604448566\n","Epoch: 7,Loss: 0.0016411902718783285\n","Epoch: 8,Loss: 0.0015310642202026568\n","Epoch: 9,Loss: 0.001586190035315947\n","Epoch: 10,Loss: 0.0014962676366289647\n","AUC : 0.8268\n","Accuracy : 0.7772\n","AUC : 0.8204\n","Accuracy : 0.7725\n","experiment for wd: 0.005 and channels: [64, 32]\n","Epoch: 1,Loss: 0.10833145424078863\n","Epoch: 2,Loss: 0.002513838001491072\n","Epoch: 3,Loss: 0.002114080814107393\n","Epoch: 4,Loss: 0.001969207243886418\n","Epoch: 5,Loss: 0.001784903123580779\n","Epoch: 6,Loss: 0.0017264961076972002\n","Epoch: 7,Loss: 0.0015527694683092144\n","Epoch: 8,Loss: 0.001520514891196329\n","Epoch: 9,Loss: 0.0014814144188466554\n","Epoch: 10,Loss: 0.0014464687179917327\n","AUC : 0.8686\n","Accuracy : 0.8360\n","AUC : 0.8665\n","Accuracy : 0.8360\n","experiment for wd: 0.005 and channels: [64, 64]\n","Epoch: 1,Loss: 0.10189875584059896\n","Epoch: 2,Loss: 0.0024895056473234526\n","Epoch: 3,Loss: 0.0021270339001113405\n","Epoch: 4,Loss: 0.0019766150248380233\n","Epoch: 5,Loss: 0.0018105488745137476\n","Epoch: 6,Loss: 0.0016817505578868663\n","Epoch: 7,Loss: 0.0015864563322303673\n","Epoch: 8,Loss: 0.0015548168824842342\n","Epoch: 9,Loss: 0.0014178152097604022\n","Epoch: 10,Loss: 0.0015714051542230524\n","AUC : 0.8232\n","Accuracy : 0.7813\n","AUC : 0.8212\n","Accuracy : 0.7822\n","experiment for wd: 0.01 and channels: [32, 32]\n","Epoch: 1,Loss: 0.15112162788685124\n","Epoch: 2,Loss: 0.0024522515998866698\n","Epoch: 3,Loss: 0.002164750390399534\n","Epoch: 4,Loss: 0.001999718158577497\n","Epoch: 5,Loss: 0.0018754784492417598\n","Epoch: 6,Loss: 0.0017577810096554459\n","Epoch: 7,Loss: 0.0017417633986602035\n","Epoch: 8,Loss: 0.0016086867965686208\n","Epoch: 9,Loss: 0.0015602340662063886\n","Epoch: 10,Loss: 0.0015154347889340268\n","AUC : 0.8816\n","Accuracy : 0.8388\n","AUC : 0.8825\n","Accuracy : 0.8394\n","experiment for wd: 0.01 and channels: [64, 32]\n","Epoch: 1,Loss: 0.09940092327753798\n","Epoch: 2,Loss: 0.00247669702825638\n","Epoch: 3,Loss: 0.0021253232199412125\n","Epoch: 4,Loss: 0.0020044236318566477\n","Epoch: 5,Loss: 0.0018118215093496613\n","Epoch: 6,Loss: 0.0017809354171801645\n","Epoch: 7,Loss: 0.0016163196799775157\n","Epoch: 8,Loss: 0.0015952514596462536\n","Epoch: 9,Loss: 0.001561237202706532\n","Epoch: 10,Loss: 0.001452107613798804\n","AUC : 0.8862\n","Accuracy : 0.8437\n","AUC : 0.8855\n","Accuracy : 0.8451\n","experiment for wd: 0.01 and channels: [64, 64]\n","Epoch: 1,Loss: 0.10424064619180101\n","Epoch: 2,Loss: 0.0024616771297027856\n","Epoch: 3,Loss: 0.0020174724291651867\n","Epoch: 4,Loss: 0.0018911793263844\n","Epoch: 5,Loss: 0.0017262982983643619\n","Epoch: 6,Loss: 0.0016274213737163406\n","Epoch: 7,Loss: 0.0015074495020179221\n","Epoch: 8,Loss: 0.0015302680146235686\n","Epoch: 9,Loss: 0.0014453965270569405\n","Epoch: 10,Loss: 0.001315426987891372\n","AUC : 0.8011\n","Accuracy : 0.7467\n","AUC : 0.8031\n","Accuracy : 0.7482\n","[[0.87075114 0.84039504 0.84995393]\n"," [0.87020774 0.85201228 0.8831188 ]\n"," [0.82675184 0.86857553 0.82316727]\n"," [0.88162711 0.88615322 0.80110199]]\n","[[0.87468756 0.84516881 0.85081309]\n"," [0.87151388 0.85194996 0.88468385]\n"," [0.82044993 0.86646973 0.82116422]\n"," [0.8824898  0.88549032 0.80312709]]\n"]}]},{"cell_type":"code","execution_count":null,"id":"983c2700","metadata":{"id":"983c2700"},"outputs":[],"source":["        edgetype, edge_indexes, labelled_edge_indexes, labelled_edgetype=torch.empty(1,0),torch.empty(2,0),torch.empty(2,0),torch.empty(0)\n","        #labelled_edge=torch.empty(0)\n","        i=1\n","        j=1\n","for key in edge_types:\n","            edge_indexes=torch.cat([edge_indexes,val_data[key].edge_index],dim=-1).to(torch.int64)\n","            edgetype=torch.cat([edgetype,torch.full((1,val_data[key].edge_index.size(1)),i)],dim=-1).to(torch.int64)\n","            i+=1\n","for key in edge_types:\n","            labelled_edge_indexes=torch.cat([labelled_edge_indexes,val_data[key].edge_label_index],dim=-1).to(torch.int64)\n","            labelled_edgetype=torch.cat([labelled_edgetype,val_data[key].edge_label*j],dim=-1).to(torch.int64)\n","            j+=1\n","edgetype=edgetype.view(-1)\n","#labelled_edgetype=labelled_edgetype.view(-1)\n","edge_labels=[torch.where(labelled_edgetype == i, 1, torch.tensor(0)).to(torch.float)  for i in  range(len(edge_types))]\n","edge_labels\n","a=torch.stack([edge_labels[0], edge_labels[1],edge_labels[2], edge_labels[3]])\n","b=torch.stack([edge_labels[2], edge_labels[3]])\n","c=torch.empty(4,0)\n","#torch.cat([c,edge_labels], dim=0)\n","edge_labels[0]\n","#torch.max(alls, dim=0).values.numpy()\n","#torch.max(edge_labels,dim=1,keepdim=True)"]},{"cell_type":"markdown","source":["## RGCN-MULTI EDGETYPE"],"metadata":{"id":"xjm-5f2HBOgq"},"id":"xjm-5f2HBOgq"},{"cell_type":"code","execution_count":null,"id":"6e30d70b","metadata":{"id":"6e30d70b"},"outputs":[],"source":["### MULTI-EDGETYPE SCORES\n","from torch_geometric.nn import GAE, RGCNConv\n","from torch.nn import Parameter\n","class RGCNEncoder(torch.nn.Module):\n","    def __init__(self, num_nodes, hidden_channels, num_relations):\n","        super().__init__()\n","        self.node_emb = Parameter(torch.Tensor(num_nodes, hidden_channels)) ##Initiliaze Learnable embedding vector (paper r-GAT)\n","        self.conv1 = RGCNConv(hidden_channels, hidden_channels, num_relations)\n","        self.conv2 = RGCNConv(hidden_channels, hidden_channels, num_relations)\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        torch.nn.init.xavier_uniform_(self.node_emb)\n","        self.conv1.reset_parameters()\n","        self.conv2.reset_parameters()\n","\n","    def forward(self, edge_index, edge_type):\n","        x = self.node_emb\n","        x = self.conv1(x, edge_index, edge_type).relu_()\n","        #x = F.dropout(x, p=0.2, training=self.training)\n","        x = self.conv2(x, edge_index, edge_type)\n","        return x\n","\n","\n","class DistMultDecoder(torch.nn.Module):\n","    def __init__(self, num_relations, hidden_channels):\n","        super().__init__()\n","        self.rel_emb = Parameter(torch.Tensor(num_relations, hidden_channels))\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        torch.nn.init.xavier_uniform_(self.rel_emb)\n","\n","    def forward(self, z, edge_label_index):\n","        z_src, z_dst = z[edge_label_index[0]], z[edge_label_index[1]]\n","#         out=torch.empty(0)\n","#         for i in range(len(edge_type)):\n","#             #score=torch.sum(z_src[i]*rel_emb*z_dst[i], dim=1)\n","#             out=torch.cat([out,torch.max(torch.sum(z_src[i-1]*rel_emb*z_dst[i-1], dim=1).sigmoid(),dim=0,keepdim=True).indices+1],dim=-1)\n","#         pred=out#.to(torch.int64)\n","        scores=[torch.sum(z_src*self.rel_emb[i]*z_dst, dim=1) for i in range(len(edge_types))]\n","        return  scores\n","\n","modelRGCN = GAE(\n","    RGCNEncoder(data.num_nodes, hidden_channels=64, num_relations=len(edge_types)),\n","    DistMultDecoder(len(edge_types), hidden_channels=64),\n",")\n","optimizer = torch.optim.Adam(modelRGCN.parameters(), lr=0.01, weight_decay=5*1e-3) #1e-3 optimal for 1 sector\n","modelRGCN.loss=torch.nn.BCEWithLogitsLoss()"]},{"cell_type":"code","execution_count":null,"id":"4decaac8","metadata":{"id":"4decaac8"},"outputs":[],"source":["#Train with mini-batchs\n","def train_batch(model):\n","    model.train()\n","    total_examples = total_loss = 0\n","    z_train=torch.empty(0)\n","    for batch in train_loader:\n","        optimizer.zero_grad()\n","        batch = batch.to(device)\n","        batch_size = train_loader.batch_size\n","        edgetype, edge_indexes, labelled_edge_indexes, labelled_edgetype=torch.empty(1,0),torch.empty(2,0),torch.empty(2,0),torch.empty(0)\n","        labelled_edge=torch.empty(0)\n","        i=1\n","        for key in edge_types:\n","            edge_indexes=torch.cat([edge_indexes,batch[key].edge_index],dim=-1).to(torch.int64)\n","            edgetype=torch.cat([edgetype,torch.full((1,batch[key].edge_index.size(1)),i)],dim=-1).to(torch.int64)\n","            labelled_edge_indexes=torch.cat([labelled_edge_indexes,batch[key].edge_label_index],dim=-1).to(torch.int64)\n","            labelled_edgetype=torch.cat([labelled_edgetype,batch[key].edge_label*i],dim=-1)\n","            i+=1\n","        #edge_indexes=edge_indexes.view(-1)\n","        edgetype=edgetype.view(-1)\n","        #labelled_edgetype=labelled_edgetype.view(-1)\n","        edge_labels=[torch.where(labelled_edgetype == i+1, 1, torch.tensor(0)).to(torch.float)  for i in  range(len(edge_types))]\n","        #labelled_edge_indexes=labelled_edge_indexes.view(-1)\n","        z = model.encode(edge_indexes, edge_type=edgetype)\n","        z_train=torch.cat([z_train,z],dim=0)\n","        out = model.decode(z, labelled_edge_indexes)\n","        #out_all=torch.stack([out[0].sigmoid(), out[1].sigmoid(),out[2].sigmoid(),out[3].sigmoid()])\n","        loss=float(0)\n","        for i in  range(len(edge_types)):\n","            loss += model.loss(out[i], edge_labels[i])\n","        total_examples += batch_size\n","        total_loss += float(loss) * batch_size\n","\n","        loss.backward()\n","        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.)\n","        optimizer.step()\n","    print(f'Loss: {total_loss/total_examples}')\n","    return z_train"]},{"cell_type":"code","execution_count":null,"id":"707647a9","metadata":{"id":"707647a9"},"outputs":[],"source":["#Train with mini-batchs\n","def train_batch(model,epochs):\n","    model.train()\n","    for epoch in range(epochs):\n","        total_examples = total_loss = 0\n","        z_train=torch.empty(0)\n","        for batch in train_loader:\n","            optimizer.zero_grad()\n","            batch = batch.to(device)\n","            batch_size = train_loader.batch_size\n","            edgetype, edge_indexes, labelled_edge_indexes, labelled_edgetype=torch.empty(1,0),torch.empty(2,0),torch.empty(2,0),torch.empty(0)\n","            labelled_edge=torch.empty(0)\n","            i=1\n","            for key in edge_types:\n","                edge_indexes=torch.cat([edge_indexes,batch[key].edge_index],dim=-1).to(torch.int64)\n","                edgetype=torch.cat([edgetype,torch.full((1,batch[key].edge_index.size(1)),i)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes=torch.cat([labelled_edge_indexes,batch[key].edge_label_index],dim=-1).to(torch.int64)\n","                labelled_edgetype=torch.cat([labelled_edgetype,batch[key].edge_label*i],dim=-1)\n","                i+=1\n","            #edge_indexes=edge_indexes.view(-1)\n","            edgetype=edgetype.view(-1)\n","            #labelled_edgetype=labelled_edgetype.view(-1)\n","            edge_labels=[torch.where(labelled_edgetype == i+1, 1, torch.tensor(0)).to(torch.float)  for i in  range(len(edge_types))]\n","            labels=torch.stack([edge_labels[0], edge_labels[1],edge_labels[2], edge_labels[3]])\n","            #labelled_edge_indexes=labelled_edge_indexes.view(-1)\n","            z = model.encode(edge_indexes, edge_type=edgetype)\n","            z_train=torch.cat([z_train,z],dim=0)\n","            out = model.decode(z, labelled_edge_indexes)\n","            #out_all=torch.stack([out[0].sigmoid(), out[1].sigmoid(),out[2].sigmoid(),out[3].sigmoid()])\n","            loss=float(0)\n","            for i in  range(len(edge_types)):\n","                loss += model.loss(out[i], edge_labels[i])\n","            total_examples += batch_size\n","            total_loss += float(loss) * batch_size\n","            loss.backward()\n","            torch.nn.utils.clip_grad_norm_(model.parameters(), 1.)\n","            optimizer.step()\n","        print(f'Epoch: {epoch + 1},Loss: {total_loss/total_examples}')\n","    return  z_train"]},{"cell_type":"code","execution_count":null,"id":"ec6c5ce6","metadata":{"id":"ec6c5ce6"},"outputs":[],"source":["#Train with mini-batchs\n","def train_batch(model,epochs):\n","    model.train()\n","    for epoch in range(epochs):\n","        total_examples = total_loss = 0\n","        z_train=torch.empty(0)\n","        for batch in train_loader:\n","            optimizer.zero_grad()\n","            batch = batch.to(device)\n","            batch_size = train_loader.batch_size\n","            edgetype, edge_indexes, labelled_edge_indexes, labelled_edgetype=torch.empty(1,0),torch.empty(2,0),torch.empty(2,0),torch.empty(0)\n","            labelled_edge=torch.empty(0)\n","            i=1\n","            for key in edge_types:\n","                edge_indexes=torch.cat([edge_indexes,batch[key].edge_index],dim=-1).to(torch.int64)\n","                edgetype=torch.cat([edgetype,torch.full((1,batch[key].edge_index.size(1)),i)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes=torch.cat([labelled_edge_indexes,batch[key].edge_label_index],dim=-1).to(torch.int64)\n","                labelled_edgetype=torch.cat([labelled_edgetype,batch[key].edge_label*i],dim=-1)\n","                i+=1\n","            #edge_indexes=edge_indexes.view(-1)\n","            edgetype=edgetype.view(-1)\n","            #labelled_edgetype=labelled_edgetype.view(-1)\n","            edge_labels=[torch.where(labelled_edgetype == i+1, 1, torch.tensor(0)).to(torch.float)  for i in  range(len(edge_types))]\n","            labels=torch.stack([edge_labels[0], edge_labels[1],edge_labels[2], edge_labels[3]])\n","            #labelled_edge_indexes=labelled_edge_indexes.view(-1)\n","            z = model.encode(edge_indexes, edge_type=edgetype)\n","            z_train=torch.cat([z_train,z],dim=0)\n","            out = model.decode(z, labelled_edge_indexes)\n","            #out_all=torch.stack([out[0].sigmoid(), out[1].sigmoid(),out[2].sigmoid(),out[3].sigmoid()])\n","            loss=float(0)\n","            for i in  range(len(edge_types)):\n","                loss += model.loss(out[i], edge_labels[i])\n","            total_examples += batch_size\n","            total_loss += float(loss) * batch_size\n","            loss.backward()\n","            torch.nn.utils.clip_grad_norm_(model.parameters(), 1.)\n","            optimizer.step()\n","        print(f'Epoch: {epoch + 1},Loss: {total_loss/total_examples}')\n","    return  z_train"]},{"cell_type":"code","execution_count":null,"id":"66ebc9d5","metadata":{"id":"66ebc9d5"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"id":"0a9ad638","metadata":{"id":"0a9ad638","outputId":"ecfdc478-cd5b-47d9-8bf5-552a9069ea54"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch: 1,Loss: 2.7685575087865195\n","Epoch: 2,Loss: 2.6758015553156533\n","Epoch: 3,Loss: 1.9022331833839417\n","Epoch: 4,Loss: 1.2675272425015767\n","Epoch: 5,Loss: 1.0294260481993358\n","Epoch: 6,Loss: 0.97605299949646\n","Epoch: 7,Loss: 0.9215481281280518\n","Epoch: 8,Loss: 0.8838494221369425\n","Epoch: 9,Loss: 0.8564487397670746\n","Epoch: 10,Loss: 0.8255112667878469\n"]}],"source":["z_train=train_batch(modelRGCN,10)"]},{"cell_type":"code","execution_count":null,"id":"91210440","metadata":{"id":"91210440"},"outputs":[],"source":["from sklearn.metrics import roc_auc_score, accuracy_score,roc_curve ,RocCurveDisplay\n","\n","def evaluate_batch(loader,model):\n","    model.eval()\n","    #y_true, y_pred = [], []\n","    y_true, y_pred=torch.empty(4,0),torch.empty(4,0)\n","    for batch in loader:\n","        with torch.no_grad():\n","            batch = batch.to(device)\n","            edgetype, edge_indexes, labelled_edge_indexes, labelled_edgetype=torch.empty(1,0),torch.empty(2,0),torch.empty(2,0),torch.empty(0)\n","            #labelled_edge=torch.empty(0)\n","            i=1\n","            for key in edge_types:\n","                #edge_indexes=torch.cat([edge_indexes,batch[key].edge_index],dim=-1).to(torch.int64)\n","                #edgetype=torch.cat([edgetype,torch.full((1,batch[key].edge_index.size(1)),i)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes=torch.cat([labelled_edge_indexes,batch[key].edge_label_index],dim=-1).to(torch.int64)\n","                labelled_edgetype=torch.cat([labelled_edgetype,batch[key].edge_label*i],dim=-1).to(torch.int64)\n","                #labelled_edge=torch.cat([labelled_edge,batch[key].edge_label],dim=-1)\n","                i+=1\n","            #edge_indexes=edge_indexes.view(-1)\n","            #edgetype=edgetype.view(-1)\n","            #labelled_edgetype=labelled_edgetype.view(-1)\n","            edge_labels=[torch.where(labelled_edgetype == i+1, 1, torch.tensor(0)).to(torch.float)  for i in  range(len(edge_types))]\n","            labels=torch.stack([edge_labels[0], edge_labels[1],edge_labels[2], edge_labels[3]])\n","            z = model.encode(edge_indexes, edge_type=edgetype)\n","            scores = model.decode(z, labelled_edge_indexes)\n","            scores_all=torch.stack([scores[0].sigmoid(), scores[1].sigmoid(),scores[2].sigmoid(),scores[3].sigmoid()])\n","            #scores_max=torch.max(scores_all, dim=0)\n","            #pred=torch.argmax(scores_all, dim=0)+1\n","            y_pred=torch.cat([y_pred,scores_all],dim=1)\n","            y_true =torch.cat([y_true,labels],dim=1)\n","    for i in  range(len(edge_types)):\n","            auc = roc_auc_score(y_true[i].numpy(), y_pred[i].numpy())\n","            acc = accuracy_score(y_true[i].numpy(), [1 if p >= 0.5 else 0 for p in y_pred[i].numpy()])\n","            RocCurveDisplay.from_predictions(y_true[i].numpy(), y_pred[i].numpy())\n","            print(f\"Validation AUC for class {i+1}: {auc:.4f}\")\n","            print(f\"Validation accuracy for class {i+1}: {acc:.4f}\")\n","    return auc, acc\n","\n","\n"]},{"cell_type":"code","execution_count":null,"id":"65e03548","metadata":{"id":"65e03548"},"outputs":[],"source":["from sklearn.metrics import roc_auc_score, accuracy_score, precision_score,confusion_matrix,ConfusionMatrixDisplay\n","\n","def evaluate(data,model,z):\n","    model.eval()\n","    #y_true, y_pred = [], []\n","    with torch.no_grad():\n","        edgetype, edge_indexes, labelled_edge_indexes, labelled_edgetype=torch.empty(1,0),torch.empty(2,0),torch.empty(2,0),torch.empty(0)\n","        #labelled_edge=torch.empty(0)\n","        i=1\n","        for key in edge_types:\n","                edge_indexes=torch.cat([edge_indexes,data[key].edge_index],dim=-1).to(torch.int64)\n","                edgetype=torch.cat([edgetype,torch.full((1,data[key].edge_index.size(1)),i)],dim=-1).to(torch.int64)\n","                labelled_edge_indexes=torch.cat([labelled_edge_indexes,data[key].edge_label_index],dim=-1).to(torch.int64)\n","                labelled_edgetype=torch.cat([labelled_edgetype,data[key].edge_label*i],dim=-1)\n","                i+=1\n","        #edge_indexes=edge_indexes.view(-1)\n","        edgetype=edgetype.view(-1)\n","        #labelled_edgetype=labelled_edgetype.view(-1)\n","        edge_labels=[torch.where(labelled_edgetype == i+1, 1, torch.tensor(0)).to(torch.float)  for i in  range(len(edge_types))]\n","        labels=torch.stack([edge_labels[0], edge_labels[1],edge_labels[2], edge_labels[3]])\n","        #z = model.encode(edge_indexes, edge_type=edgetype)\n","        scores = model.decode(z, labelled_edge_indexes)\n","        scores_all=torch.stack([scores[0].sigmoid(), scores[1].sigmoid(),scores[2].sigmoid(),scores[3].sigmoid()])\n","    for i in  range(len(edge_types)):\n","            auc = roc_auc_score(labels[i].numpy(), scores_all[i].numpy())\n","            acc = accuracy_score(labels[i].numpy(), [1 if p >= 0.5 else 0 for p in scores_all[i].numpy()])\n","            prec = precision_score(labels[i].numpy(), [1 if p >= 0.5 else 0 for p in scores_all[i].numpy()])\n","            print(f\"Validation AUC for class {i+1}: {auc:.4f}\")\n","            print(f\"Validation accuracy for class {i+1}: {acc:.4f}\")\n","            print(f\"Validation precision for class {i+1}: {prec:.4f}\")\n","            mat=confusion_matrix(labels[i].numpy(), [1 if p >= 0.5 else 0 for p in scores_all[i].numpy()])\n","            disp = ConfusionMatrixDisplay(confusion_matrix=mat,display_labels=labels.unique())\n","            disp.plot()\n","    return auc, acc\n","\n"]},{"cell_type":"code","execution_count":null,"id":"ad1e2a6a","metadata":{"id":"ad1e2a6a","outputId":"9104aae7-55e7-49fe-b887-fc77cddbfa61"},"outputs":[{"data":{"text/plain":["torch.Size([2474])"]},"execution_count":108,"metadata":{},"output_type":"execute_result"}],"source":["test_data['COMPETES'].edge_label.size()"]},{"cell_type":"code","execution_count":null,"id":"6c9fd700","metadata":{"id":"6c9fd700","outputId":"90e4c8fb-9b98-4257-b563-3f8611860e74"},"outputs":[{"name":"stdout","output_type":"stream","text":["Validation AUC for class 1: 0.4636\n","Validation accuracy for class 1: 0.9857\n","Validation AUC for class 2: 0.4662\n","Validation accuracy for class 2: 0.8141\n","Validation AUC for class 3: 0.4579\n","Validation accuracy for class 3: 0.8614\n","Validation AUC for class 4: 0.4804\n","Validation accuracy for class 4: 0.8388\n"]},{"data":{"text/plain":["(0.4803982271980336, 0.8387614850227832)"]},"execution_count":163,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["evaluate_batch(test_loader,modelRGCN)"]},{"cell_type":"code","execution_count":null,"id":"65e1d02a","metadata":{"id":"65e1d02a","outputId":"793eafcb-d665-4ba3-9a25-c05b14a291fe"},"outputs":[{"name":"stdout","output_type":"stream","text":["Validation AUC for class 1: 0.6948\n","Validation accuracy for class 1: 0.9212\n","Validation precision for class 1: 0.0714\n","Validation AUC for class 2: 0.6625\n","Validation accuracy for class 2: 0.8488\n","Validation precision for class 2: 0.0000\n"]},{"name":"stderr","output_type":"stream","text":["C:\\Users\\jack\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","C:\\Users\\jack\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","C:\\Users\\jack\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"name":"stdout","output_type":"stream","text":["Validation AUC for class 3: 0.8310\n","Validation accuracy for class 3: 0.8691\n","Validation precision for class 3: 0.0000\n","Validation AUC for class 4: 0.5752\n","Validation accuracy for class 4: 0.8584\n","Validation precision for class 4: 0.0000\n"]},{"data":{"text/plain":["(0.5751741299684477, 0.858392999204455)"]},"execution_count":112,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"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ISEBDz30kPh62rRpmDBhwj0fR0FBAWQyGbKzsxuM6dKlC1auXNnoPlNSUtCuXTurxyaTybB9+3ar+yGipsHkh0gCpk2bBplMBplMBgcHB3Tr1g3z5s1DZWVlk7/3qlWrkJKS0qjYxiQsRERNzb65B0BEtjFq1Chs2LABtbW1+Omnn/D000+jsrIS69atqxdbW1t7x8cZNJZCobBJP0RE9worP0QSIZfLoVKpoFarERMTg8cee0ycerk5VfXRRx+hW7dukMvlEAQBer0eM2bMgFKphLu7Ox5++GH88ssvJv2+/fbb8Pb2hpubG6ZPn47r16+bXL912stoNGLp0qXo3r075HI5OnfujCVLlgAAunbtCuDGE8JlMhmGDBkittuwYQMCAwPh5OSEnj174t133zV5nyNHjqB3795wcnJC3759cezYMYt/RsuXL0dISAhcXV2hVqsxc+ZMkwdw3rR9+3YEBATAyckJI0aMQGFhocn1r7/+GmFhYXByckK3bt3w+uuvo66uzuLxEFHzYPJDJFHOzs6ora0VX58+fRqfffYZvvjiC3HaaezYsdDpdNi5cyeysrLQp08fDBs2DFeuXAEAfPbZZ1i8eDGWLFmCzMxM+Pj41EtKbvXKK69g6dKleO2113DixAls2bIF3t7eAG4kMACwd+9eFBUV4csvvwQAJCcnY+HChViyZAny8vKQmJiI1157DRs3bgQAVFZWIioqCj169EBWVhYSEhIwb948i38mbdq0werVq3H8+HFs3LgR33//PRYsWGASc+3aNSxZsgQbN27EoUOHUF5ejkcffVS8vmvXLjz++OOYM2cOTpw4gfXr1yMlJUVM8IioBRCIqMWbOnWqMH78ePF1RkaG4OnpKUyePFkQBEFYvHix4ODgIBQXF4sx+/btE9zd3YXr16+b9PXAAw8I69evFwRBEDQajfDss8+aXA8PDxd69ep12/cuLy8X5HK5kJycfNtxnjt3TgAgHDt2zOS8Wq0WtmzZYnLuzTffFDQajSAIgrB+/XrBw8NDqKysFK+vW7futn39lZ+fn7BixYoGr3/22WeCp6en+HrDhg0CACE9PV08l5eXJwAQMjIyBEEQhL///e9CYmKiST+bNm0SfHx8xNcAhG3btjX4vkTUvLjmh0givvnmG7Rt2xZ1dXWora3F+PHjsWbNGvG6n58fOnToIL7OyspCRUUFPD09TfqpqqrCmTNnAAB5eXl49tlnTa5rNBr88MMPtx1DXl4eqqurMWzYsEaPu6SkBIWFhZg+fTri4uLE83V1deJ6ory8PPTq1QsuLi4m47DUDz/8gMTERJw4cQLl5eWoq6vD9evXUVlZCVdXVwCAvb09+vbtK7bp2bMn2rVrh7y8PPTv3x9ZWVk4evSoSaXHYDDg+vXruHbtmskYiej+xOSHSCKGDh2KdevWwcHBAb6+vvUWNN/85X6T0WiEj48P9u/fX6+vu93u7ezsbHEbo9EI4MbUV3h4uMk1Ozs7AIBgg+cvnz9/HmPGjMGzzz6LN998Ex4eHjh48CCmT59uMj0I3Niqfqub54xGI15//XVMnDixXoyTk5PV4ySipsfkh0giXF1d0b1790bH9+nTBzqdDvb29ujSpcttYwIDA5Geno4nnnhCPJeent5gn/7+/nB2dsa+ffvw9NNP17vu6OgI4Eal5CZvb2907NgRZ8+exWOPPXbbfoOCgrBp0yZUVVWJCZa5cdxOZmYm6urq8M4776BNmxvLHT/77LN6cXV1dcjMzET//v0BAPn5+SgrK0PPnj0B3Pi55efnW/SzJqL7C5MfolZq+PDh0Gg0mDBhApYuXYoePXrgjz/+wM6dOzFhwgT07dsXL7zwAqZOnYq+ffvib3/7G1JTU5Gbm4tu3brdtk8nJye89NJLWLBgARwdHTFw4ECUlJQgNzcX06dPh1KphLOzM7RaLTp16gQnJycoFAokJCRgzpw5cHd3x+jRo1FdXY3MzEyUlpbixRdfRExMDBYuXIjp06fjn//8JwoKCvB///d/Fn3eBx54AHV1dVizZg3GjRuHQ4cO4b333qsX5+DggNmzZ2P16tVwcHDA888/j4iICDEZWrRoEaKioqBWqzFp0iS0adMGv/76K3JycvDWW29Z/h+CiO457vYiaqVkMhl27tyJQYMG4amnnkJAQAAeffRRFBQUiLuzpkyZgkWLFuGll15CWFgYzp8/j+eee85sv6+99hrmzp2LRYsWITAwEFOmTEFxcTGAG+tpVq9ejfXr18PX1xfjx48HADz99NP44IMPkJKSgpCQEAwePBgpKSni1vi2bdvi66+/xokTJ9C7d28sXLgQS5cutejzPvTQQ1i+fDmWLl2K4OBgpKamIikpqV6ci4sLXnrpJcTExECj0cDZ2Rlbt24Vr48cORLffPMN9uzZg379+iEiIgLLly+Hn5+fReMhouYjE2wxmU5ERETUQrDyQ0RERK0Kkx8iIiJqVZj8EBERUavC5IeIiIhaFSY/RERE1Kow+SEiIqJWhckPERERtSpMfoiIiKhVYfJDRERErQqTHyIiImpVmPwQERFRq/L/A7FJfp+b/5tHAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"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vYBWJD+DBw82mlcTRRGlpaUoLy/HG2+8YW53RERE1MFt2LABADBmzBij81u2bMHs2bMBAEuWLEFNTQ3mzZuHiooKhIWFYc+ePXB1dZXi16xZA1tbW8yYMQM1NTUYN24cUlJSjJ4lmpqaivj4eGlXWHR0NNavX2/WeM2+z8+LL75o9LpLly7o3r07xowZgwEDBpj14WQe3ueHOgPe54fk6nbe5+eu55NgY8F9fvTXr+PnpNbf5+dOZ1blp6GhAb1798aECROkxUtERER0h7HSbi+5MmvBs62tLZ544okW3+SIiIiIbr/b/XiLjsbs3V5hYWH4/vvv22IsRERERG3O7AXP8+bNw8KFC3Hu3DmEhobC2dnZ6P2QkBCrDY6IiIhaSebVG0u0OPl55JFH8Nprr0kPG4uPj5feUygU0t0Vf//kVSIiImoHXPNjUouTn61bt+KVV17B6dOn23I8RERERG2qxclP4454X1/fNhsMERERWe523+SwozFrzY85Dw0jIiKidsJpL5PMSn769+//hwnQ5cuXLRoQERERUVsyK/l58cUXIQhCW42FiIiIrIDTXqaZlfw88MADUKlUbTUWIiIisgZOe5nU4psccr0PERERyYHZu72IiIjoDsfKj0ktTn4MBkNbjoOIiIishGt+TDP78RZERER0h2PlxySzH2xKRERE1JGx8kNERCQ3rPyYxOSHiIhIZrjmxzROexEREVGnwsoPERGR3HDayyQmP0RERDLDaS/TOO1FREREnQorP0RERHLDaS+TmPwQERHJDZMfkzjtRURERJ0KKz9EREQyo/jfYUl7OWPyQ0REJDec9jKJyQ8REZHMcKu7aVzzQ0RERJ0KKz9ERERyw2kvk5j8EBERyZHMExhLcNqLiIiILPbtt99iypQp8PHxgUKhwI4dO4zenz17NhQKhdERHh5uFFNbW4sFCxbA09MTzs7OiI6Oxrlz54xiKioqEBsbC0EQIAgCYmNjceXKFbPGyuSHiIhIZhoXPFtymKu6uhoDBw7E+vXrm42ZOHEiSkpKpGP37t1G7yckJGD79u1IS0vDwYMHUVVVhaioKOj1eikmJiYGubm5SE9PR3p6OnJzcxEbG2vWWDntRUREJDftsOZn0qRJmDRpkskYpVIJtVp9y/d0Oh3efvttbNu2DREREQCAd955BxqNBl9++SUmTJiAgoIC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\n","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["evaluate(test_data,modelRGCN,z_train)"]},{"cell_type":"markdown","id":"0683dfb4","metadata":{"id":"0683dfb4"},"source":["## AutoEncoder GNN (It works)"]},{"cell_type":"code","execution_count":null,"id":"db46579c","metadata":{"id":"db46579c"},"outputs":[],"source":["\n","class GNNEncoder(torch.nn.Module):\n","    def __init__(self, hidden_channels, out_channels):\n","        super().__init__()\n","        self.conv1 = SAGEConv((-1, -1), hidden_channels)\n","        self.conv2 = SAGEConv((-1, -1), out_channels)\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        self.conv1.reset_parameters()\n","        self.conv2.reset_parameters()\n","\n","    def forward(self, x, edge_index):\n","        x = self.conv1(x, edge_index).relu()\n","        x = self.conv2(x, edge_index)\n","        return x\n","\n","\n","class EdgeDecoder(torch.nn.Module):\n","    def __init__(self, hidden_channels):\n","        super().__init__()\n","        self.lin1 = Linear(2 * hidden_channels, hidden_channels)\n","        self.lin2 = Linear(hidden_channels, 1)\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        self.lin1.reset_parameters()\n","        self.lin2.reset_parameters()\n","\n","    def forward(self, z_dict, edge_label_index):\n","        row, col = edge_label_index\n","        z = torch.cat([z_dict['Company'][row], z_dict['Company'][col]], dim=-1)\n","       # z = (z_dict['Company'][row] * z_dict['Company'][col]).sum(dim=-1)\n","        z = self.lin1(z).relu()\n","        z = self.lin2(z)\n","        #z=abs(z)\n","        return z.view(-1)\n","\n","\n","class Model(torch.nn.Module):\n","    def __init__(self, hidden_channels):\n","        super().__init__()\n","        self.encoder = GNNEncoder(hidden_channels, hidden_channels)\n","        self.encoder = to_hetero(self.encoder, train_data.metadata(), aggr='sum')\n","        self.decoder = EdgeDecoder(hidden_channels)\n","        # binary cross entropy loss with logits\n","        self.loss = torch.nn.BCEWithLogitsLoss()\n","        #self.loss = F.binary_cross_entropy_with_logits\n","    def forward(self, x_dict, edge_index_dict, edge_label_index):\n","        z_dict = self.encoder(x_dict, edge_index_dict)\n","        return self.decoder(z_dict, edge_label_index)\n","\n","\n","model = Model(hidden_channels=32).to(device)"]},{"cell_type":"code","execution_count":null,"id":"998f6435","metadata":{"id":"998f6435"},"outputs":[],"source":["# Due to lazy initialization, we need to run one model step so the number\n","# of parameters can be inferred:\n","with torch.no_grad():\n","    model.encoder(train_data.x_dict, train_data.edge_index_dict)\n","\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.01)"]},{"cell_type":"code","execution_count":null,"id":"b3ebf32c","metadata":{"id":"b3ebf32c"},"outputs":[],"source":["# ## Train with epochs\n","# def train():\n","#     for epoch in range(epochs):\n","#         model.train()\n","#         optimizer.zero_grad()\n","#         pred = model(train_data.x_dict, train_data.edge_index_dict, train_data['SUPPLIES'].edge_label_index)\n","#         target = train_data['SUPPLIES'].edge_label\n","#         loss = model.loss(pred, target)\n","#         #loss = weighted_mse_loss(pred, target, weight)\n","#         loss.backward()\n","#         optimizer.step()\n","#         val_auc = eval_link_predictor(model, val_data)\n","#        # return float(loss)\n","#        print(f'Epoch: {epoch + 1}, Loss: {float(loss)}')\n","#     return model\n"]},{"cell_type":"code","execution_count":null,"id":"fed82a34","metadata":{"id":"fed82a34"},"outputs":[],"source":["#Train with mini-batchs\n","def train_batch(model):\n","    model.train()\n","    total_examples = total_loss = 0\n","    for batch in train_loader:\n","        optimizer.zero_grad()\n","        batch = batch.to(device)\n","        batch_size = train_loader.batch_size\n","        out = model(batch.x_dict, batch.edge_index_dict, batch['SUPPLIES'].edge_label_index)\n","        target = batch['SUPPLIES'].edge_label\n","        loss = model.loss(out, target)\n","        loss.backward()\n","        optimizer.step()\n","\n","        total_examples += batch_size\n","        total_loss += float(loss) * batch_size\n","    print(f'Loss: {total_loss/total_examples}')\n","    return model"]},{"cell_type":"code","execution_count":null,"id":"19ba9e82","metadata":{"id":"19ba9e82"},"outputs":[],"source":["train_batch(model)"]},{"cell_type":"code","execution_count":null,"id":"0b4fcec6","metadata":{"id":"0b4fcec6"},"outputs":[],"source":["# from sklearn.metrics import roc_auc_score, accuracy_score\n","# @torch.no_grad()\n","# def eval_link_predictor(model, data):\n","#     model.eval()\n","#     out=model(data.x_dict, data.edge_index_dict, data['SUPPLIES'].edge_label_index).sigmoid()\n","#     y_true=data['SUPPLIES'].edge_label\n","#     auc=roc_auc_score(y_true.edge_label.cpu().numpy(), out.cpu().numpy())\n","#     acc = accuracy_score(y_true.tolist(), [1 if p >= 0.5 else 0 for p in out.tolist()])\n","#     return auc, acc\n"]},{"cell_type":"code","execution_count":null,"id":"00b32cf9","metadata":{"id":"00b32cf9"},"outputs":[],"source":["from sklearn.metrics import roc_auc_score, accuracy_score\n","\n","def evaluate(loader,model):\n","    model.eval()\n","    #y_true, y_pred = [], []\n","    y_true, y_pred=torch.empty(0),torch.empty(0)\n","    for batch in loader:\n","        with torch.no_grad():\n","            batch = batch.to(device)\n","            pred = model(batch.x_dict, batch.edge_index_dict, batch['SUPPLIES'].edge_label_index).sigmoid()\n","            #y_true += batch['SUPPLIES'].edge_label.tolist()\n","            #y_pred += torch.sigmoid(pred).tolist()\n","            y_true=torch.cat([y_true,batch['SUPPLIES'].edge_label],dim=0)\n","            y_pred=torch.cat([y_pred,pred],dim=0)\n","    auc = roc_auc_score(y_true.numpy(), y_pred.numpy())\n","    acc = accuracy_score(y_true.numpy(), [1 if p >= 0.5 else 0 for p in y_pred.numpy()])\n","    return auc, acc\n","\n","\n"]},{"cell_type":"code","execution_count":null,"id":"f37779d9","metadata":{"id":"f37779d9"},"outputs":[],"source":["# Evaluate on validation set\n","val_auc, val_acc = evaluate(val_loader,model)\n","print(f\"Validation AUC: {val_auc:.4f}\")\n","print(f\"Validation accuracy: {val_acc:.4f}\")"]},{"cell_type":"code","execution_count":null,"id":"6e209b77","metadata":{"id":"6e209b77"},"outputs":[],"source":["# Evaluate on test set\n","test_auc, test_acc = evaluate(test_loader,model)\n","print(f\"Test AUC: {test_auc:.4f}\")\n","print(f\"Test accuracy: {test_acc:.4f}\")"]},{"cell_type":"code","execution_count":null,"id":"f05349d1","metadata":{"id":"f05349d1"},"outputs":[],"source":["val_acc"]},{"cell_type":"markdown","id":"d21ae0ff","metadata":{"id":"d21ae0ff"},"source":["## HeteroGNN Wrapper"]},{"cell_type":"code","execution_count":null,"id":"be84851e","metadata":{"id":"be84851e"},"outputs":[],"source":["\n","class HeteroGNN(torch.nn.Module):\n","    def __init__(self, hidden_channels, out_channels, num_layers):\n","        super().__init__()\n","\n","        self.convs = torch.nn.ModuleList()\n","        for _ in range(num_layers):\n","            conv = HeteroConv({\n","                ('Company', 'SUPPLIES', 'Company'): GCNConv(-1, hidden_channels),\n","                ('Company', 'COMPETES', 'Company'): SAGEConv((-1, -1), hidden_channels),\n","                ('Company', 'ULTIMATE_PARENT_OF', 'Company'): GATConv((-1, -1), hidden_channels),\n","                ('Company', 'PARTNERS', 'Company'): GATConv((-1, -1), hidden_channels),\n","                edge type\n","            }, aggr='sum')\n","            self.convs.append(conv)\n","\n","        self.lin = Linear(hidden_channels, out_channels)\n","\n","    def forward(self, x_dict, edge_index_dict):\n","        for conv in self.convs:\n","            x_dict = conv(x_dict, edge_index_dict)\n","            x_dict = {key: x.relu() for key, x in x_dict.items()}\n","        return self.lin(x_dict['author'])\n","\n","model = HeteroGNN(hidden_channels=64, out_channels=dataset.num_classes,\n","                  num_layers=2)"]},{"cell_type":"code","execution_count":null,"id":"55223de3","metadata":{"id":"55223de3"},"outputs":[],"source":["model.parameters"]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.9"},"colab":{"provenance":[],"collapsed_sections":["84a96b9d","389ac5ab","eea50b4f","bfc3108d"]}},"nbformat":4,"nbformat_minor":5}